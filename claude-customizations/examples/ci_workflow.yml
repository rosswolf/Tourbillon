name: Godot Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  compile-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Setup Godot
    - name: Setup Godot
      uses: chickensoft-games/setup-godot@v1
      with:
        version: 4.2.1  # Specify your Godot version
        
    # Cache Godot imports
    - name: Cache .godot folder
      uses: actions/cache@v3
      with:
        path: .godot
        key: ${{ runner.os }}-godot-${{ hashFiles('**/*.tscn', '**/*.tres', '**/*.import') }}
        restore-keys: |
          ${{ runner.os }}-godot-
    
    # Run compile check
    - name: Run Compile Check
      run: |
        echo "Running Godot compile check..."
        godot --headless --script godot_compile_check.gd
      continue-on-error: false  # Fail the build on errors
    
    # Optional: Upload results as artifact
    - name: Upload Check Results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: compile-check-results
        path: compile_check_report.txt
    
    # Optional: Comment on PR with results
    - name: Comment PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '‚ùå **Compile Check Failed**\n\nPlease fix the type annotations and private variable access issues.\n\nRun locally with: `godot --headless --script godot_compile_check.gd`'
          })

  # Additional quality checks
  gdscript-linting:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: GDScript Static Checks
      run: |
        # Add any additional static analysis tools here
        echo "Running additional checks..."
        
        # Check for common issues
        echo "Checking for debug prints..."
        ! grep -r "^[^#]*print(" --include="*.gd" src/ || echo "Warning: Debug prints found"
        
        # Check for TODO comments
        echo "Checking for TODOs..."
        grep -r "TODO\|FIXME\|HACK" --include="*.gd" src/ || echo "No TODOs found"

  # Matrix build for multiple Godot versions (optional)
  compatibility-check:
    strategy:
      matrix:
        godot-version: ['4.1.3', '4.2.1', '4.3.0']
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Godot ${{ matrix.godot-version }}
      uses: chickensoft-games/setup-godot@v1
      with:
        version: ${{ matrix.godot-version }}
    
    - name: Run Compile Check
      run: |
        echo "Testing with Godot ${{ matrix.godot-version }}"
        godot --headless --script godot_compile_check.gd
      continue-on-error: true  # Don't fail build for compatibility tests
    
    - name: Report Compatibility
      if: failure()
      run: |
        echo "::warning::Compatibility issue with Godot ${{ matrix.godot-version }}"

# Alternative: GitLab CI configuration
# Save as .gitlab-ci.yml

.godot-compile-check:
  image: barichello/godot-ci:4.2.1
  script:
    - godot --headless --script godot_compile_check.gd
  artifacts:
    when: on_failure
    paths:
      - compile_check_report.txt
    expire_in: 1 week

stages:
  - quality

compile-check:
  extends: .godot-compile-check
  stage: quality
  only:
    - merge_requests
    - main
    - develop