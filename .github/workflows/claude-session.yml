name: Claude Session Workflow

permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request_review_comment:
    types: [created]

jobs:
  respond:
    runs-on: [self-hosted, claude-pro]
    
    steps:
      - name: Check if Claude should respond
        id: check_claude
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if current comment mentions @claude
            const currentComment = context.payload.comment?.body || 
                                 context.payload.issue?.body || 
                                 context.payload.review?.body || '';
            
            if (currentComment.includes('@claude')) {
              console.log('Claude mentioned in current comment');
              return true;
            }
            
            // For issue comments, check if @claude was mentioned in issue or any previous comment
            if (context.eventName === 'issue_comment') {
              // Check issue body
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              if (issue.data.body && issue.data.body.includes('@claude')) {
                console.log('Claude mentioned in issue body');
                return true;
              }
              
              // Check previous comments
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              for (const comment of comments.data) {
                if (comment.body && comment.body.includes('@claude')) {
                  console.log('Claude mentioned in previous comment');
                  return true;
                }
              }
            }
            
            // For PR review comments, check PR and previous comments
            if (context.eventName === 'pull_request_review_comment') {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              
              if (pr.data.body && pr.data.body.includes('@claude')) {
                console.log('Claude mentioned in PR body');
                return true;
              }
              
              // Check previous review comments
              const reviews = await github.rest.pulls.listReviewComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              
              for (const review of reviews.data) {
                if (review.body && review.body.includes('@claude')) {
                  console.log('Claude mentioned in previous review');
                  return true;
                }
              }
            }
            
            console.log('Claude not mentioned in this thread');
            return false;
          result-encoding: string
          
      - name: Exit if Claude not needed
        if: steps.check_claude.outputs.result != 'true'
        run: |
          echo "Claude not mentioned in this thread, skipping"
          exit 0
          
      - name: Checkout
        if: steps.check_claude.outputs.result == 'true'
        uses: actions/checkout@v4
        
      - name: Setup
        if: steps.check_claude.outputs.result == 'true'
        run: |
          git config --global user.name "Claude Assistant"
          git config --global user.email "claude@assistant.local"
          echo "/home/rosswolf/.npm-global/bin" >> $GITHUB_PATH
          
      - name: Add eyes emoji
        if: steps.check_claude.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              if (context.eventName === 'issue_comment') {
                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: context.payload.comment.id,
                  content: 'eyes'
                });
              } else {
                await github.rest.reactions.createForIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  content: 'eyes'
                });
              }
            } catch (e) {
              console.log('Could not add reaction');
            }
            
      - name: Get request
        if: steps.check_claude.outputs.result == 'true'
        id: get_request
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "${{ github.event.comment.body }}" > request.txt
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "${{ github.event.issue.body }}" > request.txt
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Verify Claude Session
        if: steps.check_claude.outputs.result == 'true'
        run: |
          # GitHub-created sessions work! Sessions must be created in the same environment
          # where they will be used (GitHub Actions → GitHub Actions)
          
          if [ -f .github/CLAUDE_SESSION_ID ]; then
            SESSION_ID=$(cat .github/CLAUDE_SESSION_ID)
            echo "✓ Using GitHub-created session: $SESSION_ID"
          else
            echo "⚠️ No session found. Run 'Create Claude Session' workflow first"
            echo "Creating issues will work but be slower without session"
          fi
          
      - name: Call Claude
        if: steps.check_claude.outputs.result == 'true'
        run: |
          set +e  # Don't exit on error so we can handle it
          
          # Try to use GitHub-created session if it exists
          if [ -f .github/CLAUDE_SESSION_ID ]; then
            SESSION_ID=$(cat .github/CLAUDE_SESSION_ID)
            echo "Using GitHub-created session: $SESSION_ID"
          else
            SESSION_ID="25fd8500-045a-4a40-bb74-f1f9e60e46ce"
            echo "No GitHub session found, using default: $SESSION_ID"
          fi
          
          ISSUE_NUMBER="${{ steps.get_request.outputs.issue_number }}"
          
          # Using session resumption with --print flag (FIXED!)
          echo "=== Testing Claude session resumption ==="
          
          # Only proceed if response.md doesn't exist
          if [ -f response.md ]; then
            exit 0
          fi
          
          # Build request
          REQUEST="GitHub Issue #${ISSUE_NUMBER}
          Repository: ${{ github.repository }}
          Working Directory: ${{ github.workspace }}
          
          User Request:
          $(cat request.txt)
          
          Instructions:
          - Respond helpfully to the issue/comment
          - You have full repository access
          - To create a PR:
            1. git checkout -b branch-name-$(date +%s)
            2. Make changes
            3. git add -A && git commit -m 'message'
            4. git push origin HEAD
            5. gh pr create --title 'title' --body 'body'
          - Include PR link if you create one"
          
          # Try GitHub-created session first
          if [ -f .github/CLAUDE_SESSION_ID ]; then
            echo "Attempting to resume GitHub-created session: $SESSION_ID"
            echo "$REQUEST" | claude \
              --print \
              --resume "$SESSION_ID" \
              --dangerously-skip-permissions > response.md 2>error.log
            
            if [ $? -eq 0 ]; then
              echo "✅ GitHub session resumption successful!"
              EXIT_CODE=0
            else
              echo "❌ GitHub session resume failed, trying direct call..."
              EXIT_CODE=1
            fi
          else
            EXIT_CODE=1
          fi
          
          # Fallback to direct call if session doesn't work
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Using direct Claude call (fallback)"
            echo "$REQUEST" | claude \
              --dangerously-skip-permissions \
              --add-dir "${{ github.workspace }}" > response.md 2>error.log
            EXIT_CODE=$?
          fi
          
          # Check results
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✓ Claude call successful!"
          else
            echo "✗ Claude call failed with exit code: $EXIT_CODE"
            echo "Error log content:"
            cat error.log 2>/dev/null || echo "(no error.log)"
            echo "Response content:"
            cat response.md 2>/dev/null || echo "(no response.md)"
            
            # If still failing, just report the error
            echo "Error: Claude CLI failed. This is a known issue with session persistence." > response.md
          fi
            
      - name: Post response
        if: steps.check_claude.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const response = fs.readFileSync('response.md', 'utf8');
            const issue_number = ${{ steps.get_request.outputs.issue_number }};
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: response
            });