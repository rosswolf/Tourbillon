name: Claude Enhanced (Session-Based)

# Enhanced workflow with parent-child session architecture
# Provides 10x faster responses after initial setup

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write  # For storing artifacts

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request:
    types: [opened]

jobs:
  claude-respond-enhanced:
    runs-on: [self-hosted, claude-pro]
    
    # Run if @claude is mentioned in comments or issues
    if: contains(github.event.comment.body || github.event.issue.body || '', '@claude')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Full history for better context
          
      - name: Setup Git and GitHub CLI
        run: |
          git config --global user.name "Claude Assistant"
          git config --global user.email "claude@assistant.local"
          
          # Authenticate gh CLI with the workflow token
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status
          
      - name: Setup Environment
        run: |
          # Add npm global bin to PATH for claude command
          echo "/home/rosswolf/.npm-global/bin" >> $GITHUB_PATH
          
          # Create necessary directories
          mkdir -p $HOME/.claude/sessions
          mkdir -p artifacts
          
      - name: Check if Claude should respond
        id: should_respond
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number || context.payload.pull_request?.number;
            if (!issue_number) {
              console.log('No issue/PR number found');
              return false;
            }
            
            // Check if current comment mentions @claude
            const currentComment = context.payload.comment?.body || context.payload.issue?.body || '';
            if (currentComment.includes('@claude')) {
              console.log('Claude mentioned in current comment');
              core.setOutput('issue_number', issue_number);
              core.setOutput('should_respond', 'true');
              return true;
            }
            
            // Check if Claude has engaged before
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number
            });
            
            const claudeEngaged = comments.data.some(comment => 
              (comment.user.login === 'github-actions[bot]' && comment.body.includes('Claude')) ||
              comment.body.includes('@claude')
            );
            
            if (claudeEngaged) {
              console.log('Claude is engaged in this thread');
              core.setOutput('issue_number', issue_number);
              core.setOutput('should_respond', 'true');
              return true;
            }
            
            console.log('Claude not engaged');
            core.setOutput('should_respond', 'false');
            return false;
          
      - name: Exit if Claude shouldn't respond
        if: steps.should_respond.outputs.should_respond != 'true'
        run: |
          echo "Claude not engaged in this thread, skipping"
          exit 0
          
      - name: Get conversation history
        id: get_history
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ steps.should_respond.outputs.issue_number }};
            
            // Get issue/PR details
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number
            });
            
            // Get all comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number
            });
            
            // Build conversation
            let conversation = `Issue/PR #${issue_number}: ${issue.data.title}\n\n`;
            conversation += `Original post by @${issue.data.user.login}:\n${issue.data.body}\n\n`;
            
            for (const comment of comments.data) {
              conversation += `---\n@${comment.user.login} said:\n${comment.body}\n\n`;
            }
            
            // Add current comment if new
            if (context.payload.comment && context.payload.action === 'created') {
              conversation += `---\n@${context.payload.comment.user.login} said:\n${context.payload.comment.body}\n\n`;
            }
            
            // Save files
            require('fs').writeFileSync('conversation.txt', conversation);
            
            // Get latest request
            const latestRequest = context.payload.comment?.body || context.payload.issue?.body || '';
            require('fs').writeFileSync('latest_request.txt', latestRequest);
            
            // Detect task type
            const taskType = latestRequest.toLowerCase().includes('pull request') || latestRequest.toLowerCase().includes(' pr ') ? 'pull-request' :
                           latestRequest.toLowerCase().includes('bug') || latestRequest.toLowerCase().includes('fix') ? 'bug-fix' :
                           latestRequest.toLowerCase().includes('review') ? 'code-review' :
                           latestRequest.toLowerCase().includes('doc') || latestRequest.toLowerCase().includes('readme') ? 'documentation' :
                           'general';
            
            core.setOutput('task_type', taskType);
            core.setOutput('latest_request', latestRequest.substring(0, 100));
            
            return latestRequest;
          
      - name: Check for repository parent session
        id: check_parent
        run: |
          # Single parent session for entire repository
          PARENT_SESSION="parent-repo-castlebuilder"
          
          echo "Checking for repository-wide parent session: $PARENT_SESSION"
          
          # Check if session exists
          if .github/scripts/session_manager.sh exists "$PARENT_SESSION" | grep -q "true"; then
            echo "Repository parent session exists"
            echo "parent_exists=true" >> $GITHUB_OUTPUT
            echo "parent_session=$PARENT_SESSION" >> $GITHUB_OUTPUT
          else
            echo "Repository parent session does not exist (will be created once)"
            echo "parent_exists=false" >> $GITHUB_OUTPUT
            echo "parent_session=$PARENT_SESSION" >> $GITHUB_OUTPUT
          fi
          
      - name: Create repository parent session if needed
        id: create_parent
        if: steps.check_parent.outputs.parent_exists == 'false'
        run: |
          echo "Creating one-time repository parent session..."
          echo "This will analyze the entire codebase and may take 5-10 minutes..."
          
          # Create repository-wide parent session (this will also run indexer)
          PARENT_SESSION=$(.github/scripts/session_manager.sh create-parent "castlebuilder")
          
          if [ $? -eq 0 ]; then
            echo "Repository parent session created: $PARENT_SESSION"
            echo "parent_created=true" >> $GITHUB_OUTPUT
            echo "parent_session=$PARENT_SESSION" >> $GITHUB_OUTPUT
            
            # Store session ID as artifact for documentation
            echo "$PARENT_SESSION" > "artifacts/parent_session_repo.txt"
            echo "Created at: $(date -Iseconds)" >> "artifacts/parent_session_repo.txt"
          else
            echo "Failed to create repository parent session"
            echo "parent_created=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Determine parent session
        id: determine_parent
        run: |
          if [ "${{ steps.check_parent.outputs.parent_exists }}" = "true" ]; then
            PARENT_SESSION="${{ steps.check_parent.outputs.parent_session }}"
          else
            PARENT_SESSION="${{ steps.create_parent.outputs.parent_session }}"
          fi
          
          echo "Using parent session: $PARENT_SESSION"
          echo "parent_session=$PARENT_SESSION" >> $GITHUB_OUTPUT
          
      - name: Fork child agent for task
        id: execute_child
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PARENT_SESSION="${{ steps.determine_parent.outputs.parent_session }}"
          TASK_TYPE="${{ steps.get_history.outputs.task_type }}"
          USER_REQUEST=$(cat latest_request.txt)
          ISSUE_NUMBER=${{ steps.should_respond.outputs.issue_number }}
          
          # Build issue context for child
          ISSUE_CONTEXT="Issue #${ISSUE_NUMBER}
          Latest conversation context:
          $(tail -50 conversation.txt)"
          
          echo "Forking child agent from repository parent..."
          echo "Parent: $PARENT_SESSION"
          echo "Task type: $TASK_TYPE"
          echo "Issue: #${ISSUE_NUMBER}"
          echo "Request: ${USER_REQUEST:0:100}..."
          
          # Fork child and capture output
          .github/scripts/session_manager.sh fork-child \
            "$PARENT_SESSION" \
            "$TASK_TYPE" \
            "$USER_REQUEST" \
            "$ISSUE_CONTEXT" \
            > response.md 2>&1
          
          # Check if response was generated
          if [ ! -s response.md ]; then
            echo "No response generated from child agent" > response.md
          fi
          
      - name: Post response to GitHub
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const response = fs.readFileSync('response.md', 'utf8');
            
            const issue_number = ${{ steps.should_respond.outputs.issue_number }};
            
            // Add session info as hidden comment
            const sessionInfo = `<!-- claude-session: ${{ steps.determine_parent.outputs.parent_session }} -->`;
            const fullResponse = response + '\n\n' + sessionInfo;
            
            // Post the response
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: fullResponse
            });
            
      - name: Store session artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-session-${{ steps.should_respond.outputs.issue_number }}-${{ github.run_id }}
          path: |
            artifacts/
            conversation.txt
            latest_request.txt
            response.md
          retention-days: 7
          
      - name: Clean up old sessions
        if: github.event_name == 'schedule' || github.run_number % 10 == 0
        run: |
          echo "Cleaning up old sessions..."
          .github/scripts/session_manager.sh cleanup 7 || true
          
  # Automatic PR review using enhanced Claude
  claude-review-enhanced:
    runs-on: [self-hosted, claude-pro]
    
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Environment
        run: |
          echo "/home/rosswolf/.npm-global/bin" >> $GITHUB_PATH
          mkdir -p $HOME/.claude/sessions
          
      - name: Get PR diff
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-branch
          git diff ${{ github.event.pull_request.base.sha }}..pr-branch > pr.diff
          
      - name: Use repository parent session
        id: get_parent
        run: |
          # Use the same repository-wide parent session
          PARENT_SESSION="parent-repo-castlebuilder"
          
          # Check if it exists, create if not
          if ! .github/scripts/session_manager.sh exists "$PARENT_SESSION" | grep -q "true"; then
            echo "Creating repository parent session for PR review..."
            .github/scripts/session_manager.sh create-parent "castlebuilder"
          fi
          
          echo "parent_session=$PARENT_SESSION" >> $GITHUB_OUTPUT
          
      - name: Review with child agent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PARENT_SESSION="${{ steps.get_parent.outputs.parent_session }}"
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          # Build PR context
          PR_CONTEXT="Pull Request #${PR_NUMBER}: ${{ github.event.pull_request.title }}
          Author: ${{ github.event.pull_request.user.login }}
          Description: ${{ github.event.pull_request.body }}"
          
          # Build review request
          REVIEW_REQUEST="Please review this pull request and provide feedback on:
          1. Code quality and best practices
          2. Potential bugs or issues
          3. Performance considerations
          4. Architecture alignment with project guidelines
          
          Here is the diff to review:
          $(cat pr.diff)"
          
          # Fork review child from repository parent
          .github/scripts/session_manager.sh fork-child \
            "$PARENT_SESSION" \
            "code-review" \
            "$REVIEW_REQUEST" \
            "$PR_CONTEXT" \
            > review.md
          
      - name: Post review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: `## Claude Enhanced Review (Session-Based)\n\n${review}`
            });