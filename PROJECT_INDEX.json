{"at":"2025-09-04T23:32:46.274534","root":".","tree":[".","\u251c\u2500\u2500 claude-customizations/ (3 files)","\u2502   \u251c\u2500\u2500 docs/","\u2502   \u251c\u2500\u2500 examples/ (1 files)","\u2502   \u251c\u2500\u2500 godot-hooks/ (1 files)","\u2502   \u2502   \u2514\u2500\u2500 README.md","\u2502   \u2514\u2500\u2500 README.md","\u251c\u2500\u2500 docs/","\u2502   \u251c\u2500\u2500 claude-integration/","\u2502   \u251c\u2500\u2500 deployment/","\u2502   \u251c\u2500\u2500 design/","\u2502   \u251c\u2500\u2500 game-design/","\u2502   \u251c\u2500\u2500 outdated/","\u2502   \u251c\u2500\u2500 technical/","\u2502   \u2514\u2500\u2500 README.md","\u251c\u2500\u2500 elastic-app/ (788 files)","\u2502   \u251c\u2500\u2500 app/ (769 files)","\u2502   \u2502   \u251c\u2500\u2500 ai_assets/ (22 files)","\u2502   \u2502   \u2502   \u2514\u2500\u2500 gremlins/ (20 files)","\u2502   \u2502   \u251c\u2500\u2500 cc0_assets/ (503 files)"],"stats":{"total_files":794,"total_directories":154,"fully_parsed":{"shell":2,"gdscript":81,"python":31,"godot_scene":37,"godot_shader":4,"javascript":1},"listed_only":{"json":29,"import":587,"shell":2,"gdscript":12,"tres":8},"markdown_files":60},"f":{".github/s/session_manager.sh":["s",["save_uuid_mapping:0:()::Function to save UUID mapping","get_uuid_from_name:0:()::Function to get UUID from name","session_exists:0:()::Function to check if a session exists (by UUID)","get_session_info:0:()::Function to get session info","save_session_info:0:()::Function to save session info","create_parent_session:0:()::Function to create parent session","fork_child_agent:0:():save_session_info:Function to fork child agent from parent","detect_task_type:0:()::Function to detect task type from comment","exists_by_name:0:()::Function to check if session exists by name","cleanup_old_sessions:0:()::Function to clean old sessions"]],"claude-customizations/examples/exemption_config.gd":["g",["process_item:0:(item:Item)>void::","_auto_serialize:0:()::","get_legacy_config:0:()::"]],"claude-customizations/godot-hooks/godot_compile_check.gd":["g",["_init:0:()>void:check_all_scripts,check_autoloads:","check_autoloads:0:()>void::","check_all_scripts:0:()>void:_check_directory_recursive,_check_script:","_check_directory_recursive:0:(dir:DirAccess, path:String)>void:_check_directory_recursive,_check_script:","_check_script:0:(script_path:String)>void:_check_source_for_errors,_extract_class_name,_is_file_exempt,_try_instantiate_class:","_extract_class_name:0:(source:String)>String::","_try_instantiate_class:0:(class_name_str:String, script_path:String)>void::","_check_source_for_errors:0:(source:String, script_path:String)>void:_check_private_access,_check_type_declarations,_extract_class_name,_is_file_exempt,_is_line_exempt:","_check_private_access:0:(line:String, line_num:int, script_path:String, this_class_name:String)>void:_remove_strings_and_comments:","_remove_strings_and_comments:0:(line:String)>String::","_check_type_declarations:0:(line:String, line_num:int, script_path:String)>void:_check_custom_type_usage,_check_function_types,_check_variable_type,_remove_strings_and_comments:","_check_variable_type:0:(line:String, line_num:int, script_path:String)>void::","_check_function_types:0:(line:String, line_num:int, script_path:String)>void:_check_parameter_types,_extract_function_name:","_check_parameter_types:0:(params_str:String, func_name:String, line_num:int, script_path:String)>void::","_check_custom_type_usage:0:(line:String, line_num:int, script_path:String)>void::","_extract_function_name:0:(line:String)>String::","_is_file_exempt:0:(file_path:String, exemption_type:String)>bool::","_is_line_exempt:0:(line:String)>bool::"]],"claude-customizations/install.sh":["s",["install_file:0:()::Function to install a file"]],"elastic-app/app/capture_game.py":["p",["capture_game_screenshot:7:()::"]],"elastic-app/app/capture_game_interactive.py":["p",["capture_game_interactive:7:()::"]],"elastic-app/app/check_type_safety.py":["p",["check_godot_compilation:401:(verbose:bool = False)>Tuple[bool, str]::Check if the Godot project compiles without errors.","main:483:():check_file,check_godot_compilation,print_report:Main entry point for the presubmit hook."],{"TypeSafetyChecker":["15",["__init__:16:(self, verbose:bool = False)::","check_file:66:(self, filepath:Path)>bool:_check_collection_typing,_check_function_typing,_check_nested_dictionary,_check_onready_typing,_check_variable_typing:Check a single GDScript file for type safety violations.","_check_variable_typing:151:(self, line:str, line_num:int, filepath:Path)>None::Check for untyped variable declarations.","_check_function_typing:212:(self, line:str, line_num:int, filepath:Path)>None:_split_params:Check for untyped function parameters and return types.","_check_collection_typing:267:(self, line:str, line_num:int, filepath:Path, type_exemption_active:bool = False)>None:_is_in_string_or_comment:Check for untyped arrays and dictionaries.","_is_in_string_or_comment:313:(self, line:str, text:str)>bool::Check if text appears inside a string or comment in the line.","_check_nested_dictionary:338:(self, line:str, line_num:int, filepath:Path)>None::Check for nested typed dictionaries (Godot limitation).","_check_onready_typing:347:(self, line:str, line_num:int, filepath:Path)>None::Check for untyped @onready variables.","_split_params:361:(self, params:str)>List[str]::Split function parameters, handling nested parentheses.","print_report:385:(self)>None::Print the errors and warnings found."]]}],"elastic-app/app/claude_game_tester.py":["p",["main:356:():start,stop,test_basic_interaction,test_card_gameplay,wait:Simple CLI for testing"],{"ClaudeGameTester":["23",["__init__:36:(self, headless:bool = False, verbose:bool = True)::","log:47:(self, message:str, level:str = \"info\")::Log a message","build:54:(self)>bool:log:Build the Godot project","start:65:(self, build_first:bool = True)>bool:build,click_canvas,log,start:Start the game server and browser","stop:116:(self):log,stop,wait:Stop the game server and browser","click:139:(self, x:int, y:int):click,log:Click at specific coordinates","click_canvas:144:(self):click,log:Click on the game canvas to focus it","click_button:153:(self, text:str):click,log:Click a button by its text","hover:166:(self, x:int, y:int):log:Hover at specific coordinates","drag_card:173:(self, from_pos:Tuple[int, int], to_pos:Tuple[int, int], duration:float = 0.5):log:Drag a card from one position to another","drag_and_drop:195:(self, selector_from:str, selector_to:str):log:Drag from one element to another using selectors","press_key:210:(self, key:str):log:Press a keyboard key","type_text:215:(self, text:str):log:Type text","wait:222:(self, seconds:float):log:Wait for a specified time","take_screenshot:227:(self, name:str = \"screenshot\")>Path:log:Take a screenshot","get_canvas_info:236:(self)>Optional[Dict[str, Any]]:log:Get information about the game canvas","find_clickable_areas:258:(self)>list:log:Find areas that might be clickable (experimental)","compare_screenshots:289:(self, name1:str, name2:str)>float:log:Compare two screenshots (requires additional libraries)","wait_for_animation:295:(self, timeout:float = 2.0):log:Wait for animations to complete","test_basic_interaction:303:(self):click,get_canvas_info,log,press_key,take_screenshot,wait:Run a basic interaction test","test_card_gameplay:331:(self):click_button,drag_card,log,take_screenshot,wait:Test card game specific interactions"]]}],"elastic-app/app/fix_all_remaining.py":["p",["get_all_issues:8:()::Get all type safety issues from the checker.","fix_issue:28:(filepath:Path, line_num:int, message:str)>bool::Fix a single issue.","main:98:():fix_issue,get_all_issues:Main entry point."]],"elastic-app/app/fix_final_type_safety.py":["p",["main:263:():fix_file:Main entry point."],{"FinalTypeSafetyFixer":["11",["__init__:12:(self, verbose:bool = False)::","fix_file:17:(self, filepath:Path)>bool:_fix_parameter_types,_fix_return_types,_fix_untyped_arrays,_fix_untyped_dictionaries:Fix type safety issues in a single file.","_fix_return_types:55:(self, line:str, filename:str, line_num:int)>str::Fix missing return type annotations.","_fix_untyped_arrays:174:(self, line:str, filename:str, line_num:int)>str::Fix untyped arrays.","_fix_untyped_dictionaries:201:(self, line:str, filename:str, line_num:int)>str::Fix untyped dictionaries.","_fix_parameter_types:249:(self, line:str, filename:str, line_num:int)>str::Fix missing parameter type annotations."]]}],"elastic-app/app/fix_final_types.py":["p",["fix_all_remaining:10:()::Fix all remaining type safety issues.","main:233:():fix_all_remaining:"]],"elastic-app/app/fix_last_types.py":["p",["apply_fixes:167:()::Apply all manual fixes."]],"elastic-app/app/fix_remaining_safety.py":["p",["fix_file:28:(filepath:Path, fixes:List[Tuple[int, str, str]])>bool::Fix type safety issues in a single file.","main:88:():fix_file:Main entry point."]],"elastic-app/app/fix_remaining_types.py":["p",["fix_static_data:10:()::Fix static_data.gd dictionary typing issues.","fix_countdown:50:()::Fix countdown.gd render_label function.","fix_more_functions:68:()::Fix remaining function return types and parameters.","fix_arrays_and_dicts:109:()::Fix untyped arrays and dictionaries in various files.","fix_more_missing_types:169:()::Fix additional missing types in various files.","main:205:():fix_arrays_and_dicts,fix_countdown,fix_more_functions,fix_more_missing_types,fix_static_data:"]],"elastic-app/app/fix_type_safety.py":["p",["main:314:():fix_file:Main entry point for the type safety fixer."],{"TypeSafetyFixer":["13",["__init__:14:(self, verbose:bool = False)::","fix_file:18:(self, filepath:Path)>bool:infer_node_type,infer_type_from_literal,type_parameters:Fix type safety violations in a single GDScript file.","type_parameters:152:(self, params:str, filepath:Path, line_num:int)>str:infer_type_from_literal:Add types to function parameters.","infer_type_from_literal:217:(self, value:str)>Optional[str]::Infer type from a literal value.","infer_node_type:263:(self, value:str, var_name:str)>Optional[str]::Infer node type from @onready assignment."]]}],"elastic-app/app/godot_compile_check.gd":["g",["_init:0:()>void:check_all_scripts,check_autoloads,check_specific_files:","check_specific_files:0:(files:Array[String])>void:_check_script:","check_autoloads:0:()>void::","check_all_scripts:0:()>void:_check_directory_recursive,_check_script:","_check_directory_recursive:0:(dir:DirAccess, path:String)>void:_check_directory_recursive,_check_script:","_check_script:0:(script_path:String)>void:_check_source_for_errors,_extract_class_name,_is_file_exempt,_try_instantiate_class:","_extract_class_name:0:(source:String)>String::","_try_instantiate_class:0:(class_name_str:String, script_path:String)>void::","_check_source_for_errors:0:(source:String, script_path:String)>void:_check_private_access,_check_type_declarations,_extract_class_name,_is_file_exempt,_is_line_exempt:","_check_private_access:0:(line:String, line_num:int, script_path:String, this_class_name:String)>void:_remove_strings_and_comments:","_remove_strings_and_comments:0:(line:String)>String::","_check_type_declarations:0:(line:String, line_num:int, script_path:String)>void:_check_custom_type_usage,_check_function_types,_check_variable_type,_remove_strings_and_comments:","_check_variable_type:0:(line:String, line_num:int, script_path:String)>void::","_check_function_types:0:(line:String, line_num:int, script_path:String)>void:_check_parameter_types,_extract_function_name:","_check_parameter_types:0:(params_str:String, func_name:String, line_num:int, script_path:String)>void::","_check_custom_type_usage:0:(line:String, line_num:int, script_path:String)>void::","_extract_function_name:0:(line:String)>String::","_is_file_exempt:0:(file_path:String, exemption_type:String)>bool::","_is_line_exempt:0:(line:String)>bool::"]],"elastic-app/app/sr/scenes/core/battle/gremlin_manager.gd":["g",["add_gremlin:0:(gremlin:Gremlin, slot:int = -1)>bool:_find_empty_slot:","get_gremlins_in_order:0:()>Array[Gremlin]::","get_gremlin_at_slot:0:(slot:int)>Gremlin::","get_topmost_gremlin:0:()>Gremlin::","get_bottommost_gremlin:0:()>Gremlin::","get_weakest_gremlin:0:()>Gremlin::","get_strongest_gremlin:0:()>Gremlin::","deal_damage_to_target:0:(packet:DamagePacket, target_type:String = \"topmost\")>void:_get_target_by_type,get_gremlins_in_order:","apply_overkill_damage:0:(original_packet:DamagePacket, excess_damage:int)>void:get_topmost_gremlin:","apply_poison_to_target:0:(stacks:int, target_type:String = \"topmost\")>void:_get_target_by_type:","execute_below_threshold:0:(threshold:int)>void:get_gremlins_in_order:","are_all_defeated:0:()>bool::","reset:0:()>void::","_find_empty_slot:0:()>int::","_get_target_by_type:0:(target_type:String)>Gremlin:get_bottommost_gremlin,get_strongest_gremlin,get_topmost_gremlin,get_weakest_gremlin:","_on_gremlin_defeated:0:(gremlin:Gremlin)>void::"]],"elastic-app/app/sr/scenes/core/battle/gremlin_move.gd":["g",["activate:0:(gremlin:Gremlin)>void:__apply_passive_effects,__process_effects:","deactivate:0:(gremlin:Gremlin)>void:__process_effects,__remove_passive_effects:","process_tick:0:(gremlin:Gremlin)>bool:__check_transition_condition,__execute_trigger:","get_effect_description:0:()>String:__describe_effects:","is_active:0:()>bool::","get_trigger_progress:0:()>float::"]],"elastic-app/app/sr/scenes/core/battle/position_bimap.gd":["g",["add:0:(entity:BattleEntity, position:int)>void:contains,is_position_empty:","move:0:(entity:BattleEntity, new_position:int)>void:get_position,is_position_empty:","remove:0:(id:String)>void:contains:","contains:0:(id:String)>bool:get_position:","get_position:0:(id:String)>int::","get_entity:0:(position:int)>BattleEntity::","is_position_empty:0:(position:int)>bool::","get_id:0:(position:int)>String:get_entity:","has_id:0:(id:String)>bool:contains:","clear:0:()>void:clear:"]],"elastic-app/app/sr/scenes/core/combat/damage_packet.gd":["g",["get_damage_amount:0:()>int::","with_bool_modifier:0:(property:String, value:bool)>DamagePacket::","with_int_modifier:0:(property:String, value:int)>DamagePacket::","_to_string:0:()>String::"]],"elastic-app/app/sr/scenes/core/combat/damageable.gd":["g",["receive_damage:0:(packet:DamagePacket)>int:_apply_damage,_apply_post_damage_effects,_apply_pre_damage_modifiers,_calculate_damage:","_apply_pre_damage_modifiers:0:(packet:DamagePacket)>DamagePacket::","_calculate_damage:0:(packet:DamagePacket)>DamageResult::","_apply_damage:0:(result:DamageResult, packet:DamagePacket)>int:_on_defeated:","_apply_post_damage_effects:0:(packet:DamagePacket, actual_damage:int)>void:_apply_overkill,_reflect_damage:","heal:0:(amount:int)>int::","add_shields:0:(amount:int)>void::","add_barriers:0:(count:int)>void::","apply_burn:0:(ticks:int)>void::","can_be_executed:0:(threshold:int)>bool::","execute:0:()>void:_on_defeated:","_on_defeated:0:()>void::","_reflect_damage:0:(source:Node, amount:int)>void:receive_damage:","_apply_overkill:0:(packet:DamagePacket, excess:int)>void::"]],"elastic-app/app/sr/scenes/core/effects/move_descriptor_effect.gd":["g",["_init:0:(move_descriptor:String, cost:Cost = null)>void::","activate:0:(source:Entity)>bool:activate:","get_intent_amount:0:()>int::"]],"elastic-app/app/sr/scenes/core/effects/one_time_effect.gd":["g",["_init:0:(template_id:String,  params:Dictionary, cost:Cost = null)>void::","activate:0:(source:Entity)>bool::"]],"elastic-app/app/sr/scenes/core/effects/poison_consumer.gd":["g",["_init:0:(initial_value:int = 1)>void::","add_poison:0:(amount:int)>void::","process_beat:0:(context:BeatContext)>void:_trigger_poison:","_trigger_poison:0:()>void::","should_remove:0:()>bool::","get_poison_value:0:()>int::","reset:0:()>void:reset:"]],"elastic-app/app/sr/scenes/core/entities/battle_entity.gd":["g",["signal_moved:0:(new_position:int)>void:signal_moved:","signal_created:0:()>void:signal_created:","get_active_status_effects:0:()>Array[StatusEffect.Type]::","has_status_effect:0:(effect:StatusEffect.Type)>bool::","decrement_status_effect:0:(effect:StatusEffect.Type)>void::","decrement_all_status_effects:0:()>void:decrement_status_effect:","apply_unit_damage:0:(initial_damage:int, attack_source:BattleEntity)>bool::"]],"elastic-app/app/sr/scenes/core/entities/battleground_entity.gd":["g",["_get_type:0:()>Entity.EntityType::"],{"BattlegroundEntity":["0",["build:0:()>BattlegroundEntity::"]]}],"elastic-app/app/sr/scenes/core/entities/button.gd":["g",["_init:0:()>void::","get_card_instance_id:0:()>String::","activate_slot_effect:0:(source:Entity, target:Entity)>bool:activate_slot_effect:","_get_type:0:()>Entity.EntityType::"],{"EngineButtonEntity":["0",["with_engine_slot:0:(engine_slot:EngineSlot)>EngineButtonEntityBuilder::","with_is_activation_button:0:(is_activation_button:bool)>EngineButtonEntityBuilder::","build:0:()>EngineButtonEntity::"]]}],"elastic-app/app/sr/scenes/core/entities/card.gd":["g",["has_instinct_effect:0:()>bool::","has_slot_effect:0:()>bool::","activate_slot_effect:0:(source:Entity, target:Entity)>bool::","activate_instinct_effect:0:(source:Entity, target:Entity)>bool::","_get_type:0:()>Entity.EntityType::"],{"Card":["0",["with_group_template_id:0:(group_template_id:String)>CardBuilder::","with_rarity:0:(type:Card.RarityType)>CardBuilder::","with_art_image_uid:0:(art_image_uid:String)>CardBuilder::","with_cursor_image_uid:0:(cursor_image_uid:String)>CardBuilder::","with_rules_text:0:(rules_text:String)>CardBuilder::","with_slot_effect:0:(move_descriptor:String)>CardBuilder::","with_instinct_effect:0:(move_descriptor:String)>CardBuilder::","with_card_cost:0:(required_resources:Dictionary)>CardBuilder::","build:0:()>Card::"]]}],"elastic-app/app/sr/scenes/core/entities/entity.gd":["g",["_get_type:0:()>Entity.EntityType::"],{"Entity":["0",["with_instance_id:0:(instance_id:String)>EntityBuilder::","with_template_id:0:(template_id:String)>EntityBuilder::","with_display_name:0:(display_name:String)>EntityBuilder::","build_entity:0:(entity:Entity)>Entity:__generate_instance_id,__requires_template_id:"]]}],"elastic-app/app/sr/scenes/core/entities/gremlin.gd":["g",["_init:0:()>void::","_ready:0:()>void:_sync_to_handler:","process_beat:0:(context:BeatContext)>void:_trigger_disruption,process_beat:","receive_damage:0:(packet:DamagePacket)>int:_sync_from_handler,_sync_to_handler,receive_damage:","take_damage:0:(amount:int, pierce:bool = false, pop:bool = false)>void:receive_damage:","apply_poison:0:(stacks:int)>void::","apply_burn:0:(ticks:int)>void:apply_burn:","get_poison_stacks:0:()>int::","heal:0:(amount:int)>int:_sync_from_handler,_sync_to_handler,heal:","add_shields:0:(amount:int)>void:add_shields:","can_be_executed:0:(threshold:int)>bool:can_be_executed:","execute:0:()>void:_on_defeated,execute:","_trigger_disruption:0:()>void:_apply_disruption:","_apply_disruption:0:()>void::","get_disruption_text:0:()>String::","_sync_to_handler:0:()>void::","_sync_from_handler:0:()>void::","_on_damage_received:0:(packet:DamagePacket, actual_damage:int)>void::","_on_hp_changed:0:(new_hp:int, max:int)>void::","_on_defeated_internal:0:()>void:_on_defeated:","_on_defeated:0:()>void:_remove_disruptions:","_remove_disruptions:0:()>void::","add_beat_consumer:0:(consumer:BeatConsumer)>void::","remove_beat_consumer:0:(consumer:BeatConsumer)>void::","reset:0:()>void:_sync_to_handler:","_get_type:0:()>Entity.EntityType::"],{"Gremlin":["0",["with_name:0:(name:String)>GremlinBuilder::","with_hp:0:(hp:int)>GremlinBuilder::","with_shields:0:(amount:int)>GremlinBuilder::","with_armor:0:(amount:int)>GremlinBuilder::","with_barriers:0:(count:int)>GremlinBuilder::","with_moves:0:(moves:String)>GremlinBuilder::","with_slot:0:(slot:int)>GremlinBuilder::","build:0:()>Gremlin::"]]}],"elastic-app/app/sr/scenes/core/entities/hero.gd":["g",["_init:0:()>void::","_get_type:0:()>Entity.EntityType::","reset_start_of_battle:0:()>void::","get_force_resource:0:(force_type:GameResource.Type)>CappedResource::","has_force:0:(force_type:GameResource.Type, amount:int)>bool:get_force_resource:","has_forces:0:(requirements:Dictionary)>bool:has_force:","consume_force:0:(force_type:GameResource.Type, amount:int)>bool:get_force_resource:","consume_forces:0:(requirements:Dictionary)>bool:consume_force,has_forces:","add_force:0:(force_type:GameResource.Type, amount:int)>void:get_force_resource:","add_forces:0:(production:Dictionary)>void:add_force:","signal_moved:0:(new_position:int)>void::","signal_created:0:()>void::"],{"Hero":["0",["with_image_name:0:(image_name:String)>HeroBuilder::","build:0:()>Hero:_init:"]]}],"elastic-app/app/sr/scenes/core/entities/hero_damageable.gd":["g",["_init:0:()>void:_init:","_ready:0:()>void:_sync_to_handler:","receive_damage:0:(packet:DamagePacket)>int:_apply_hero_modifiers,_sync_from_handler,_sync_to_handler,receive_damage:","_apply_hero_modifiers:0:(packet:DamagePacket)>DamagePacket::","heal:0:(amount:int)>int:_sync_from_handler,_sync_to_handler,heal:","add_shields:0:(amount:int)>void:add_shields:","add_barriers:0:(count:int)>void:add_barriers:","apply_burn:0:(ticks:int)>void:apply_burn:","can_be_executed:0:(threshold:int)>bool:can_be_executed:","execute:0:()>void:execute:","_sync_to_handler:0:()>void::","_sync_from_handler:0:()>void::","_on_damage_received:0:(packet:DamagePacket, actual_damage:int)>void::","_on_hp_changed:0:(new_hp:int, max:int)>void::","_on_shields_changed:0:(new_shields:int)>void::","_on_barrier_broken:0:()>void::","_on_defeated:0:()>void::"]],"elastic-app/app/sr/scenes/core/entities/mainplate.gd":["g",["_get_type:0:()>Entity.EntityType::","is_valid_position:0:(pos:Vector2i)>bool::","has_card_at:0:(pos:Vector2i)>bool::","get_card_at:0:(pos:Vector2i)>Card::","request_card_placement:0:(card:Card, pos:Vector2i)>bool:__trigger_bonus,has_card_at,is_valid_position:","place_card:0:(card:Card, pos:Vector2i)>bool:request_card_placement:","remove_card:0:(pos:Vector2i)>Card::","expand_grid:0:(direction:String)>bool::","get_cards_in_order:0:()>Array[Card]:__get_positions_in_order,get_card_at,has_card_at:","process_beat:0:(context:BeatContext)>void:__activate_card,__get_positions_in_order,__should_card_activate,get_card_at,has_card_at:","count_cards_with_tag:0:(tag:String)>int:get_cards_in_order:","get_adjacent_positions:0:(pos:Vector2i)>Array[Vector2i]:is_valid_position:","is_isolated:0:(pos:Vector2i)>bool:get_adjacent_positions,has_card_at:","set_bonus_square:0:(pos:Vector2i, bonus_type:String)>void:has_card_at,is_valid_position:","is_bonus_square:0:(pos:Vector2i)>bool::","get_bonus_type:0:(pos:Vector2i)>String::","clear_bonus_squares:0:()>void::","assign_random_bonus_squares:0:()>void:has_card_at,set_bonus_square:"],{"Mainplate":["0",["_init:0:(card:Card)>void::","with_grid_size:0:(size:Vector2i)>MainplateBuilder::","with_max_grid_size:0:(size:Vector2i)>MainplateBuilder::","build:0:()>Mainplate::"]]}],"elastic-app/app/sr/scenes/core/global_game_manager.gd":["g",["_ready:0:()>void::","allow_activations:0:()>void::","disallow_activations:0:()>void::","reset_game_state:0:()>void::","activate:0:(source_id:String, target_id:String)>bool:activate:","get_selected_card:0:()>Card::","end_turn:0:()>void:allow_activations,disallow_activations:","end_game:0:()>void::","get_current_tick:0:()>int::","get_current_beat:0:()>int::","get_beat_processor:0:()>BeatProcessor:get_beat_processor:"]],"elastic-app/app/sr/scenes/core/instance_catalog.gd":["g",["has_instance:0:(instance_id:String)>bool::","get_instance:0:(instance_id:String)>Node::","set_instance:0:(instance:Node)>void::","clear_instance:0:(instance_id:String, delete:bool)>void::"]],"elastic-app/app/sr/scenes/core/library.gd":["g",["_init:0:()>void::","print_hand_size:0:()>void:get_count:","add_card_to_zone:0:(card:Card, zone:Zone)>void:__get_zone_object,add_card:","move_card_to_zone2:0:(card_instance_id:String, from_zone:Zone, to_zone:Zone, override_limit:bool = false)>bool:__get_zone_object,add_card,get_count,remove_card:","add_card_to_deck:0:(card:Card)>void:add_card,add_card_to_zone,get_count:","add_cards_to_deck:0:(cards:Array[Card])>void:add_card_to_deck:","discard_hand:0:()>void:get_all_cards,move_card_to_zone2:","draw_card:0:(how_many:int)>void:add_card_to_zone,draw_top,get_all_cards,get_count,move_card_to_zone2,shuffle:","draw_new_hand:0:(desired_hand_size:int)>void:discard_hand,draw_card,get_count:","get_cards_for_selection:0:(selection_id:String)>Array[Card]:__get_card_for_selection,get_count:","card_template_already_selected:0:(candidate_template_id:String, selectable_cards:Array[Card])>bool::","shuffle_libraries:0:()>void:shuffle:","get_card:0:(card_instance_id:String)>Card:__get_zone_object,get_card:","get_card_zone:0:(card_instance_id:String)>Zone::","get_card_ids_in_zone:0:(zone:Zone)>Array[String]:__get_zone_object,get_all_card_ids:","clear_all_zones:0:()>void:clear:"],{"Library":["0",["_init:0:(type:Zone)>void::","add_card:0:(card:Card)>void::","add_cards:0:(cards:Array[Card])>void::","remove_card:0:(card_instance_id:String)>Card::","get_card:0:(card_instance_id:String)>Card::","get_all_cards:0:()>Array[Card]::","contains_card:0:(card_instance_id:String)>bool::","get_all_card_ids:0:()>Array[String]::","get_count:0:()>int::","shuffle:0:()>void:shuffle:","peek_top:0:()>Card::","draw_top:0:()>Card::","get_cards_by_template:0:(template_id:String)>Array[Card]::","clear:0:()>void::"]]}],"elastic-app/app/sr/scenes/core/resources/capped_resource.gd":["g",["_init:0:(starting_amount:int, max_amount:int, on_change:Callable, on_max_change:Callable, can_die:bool = false)>void::","increment:0:(delta:int)>void::","decrement:0:(delta:int)>void::","have_enough:0:(cost:int)>bool::","send_signal:0:()>void::"]],"elastic-app/app/sr/scenes/core/resources/cost.gd":["g",["_init:0:(resources:Dictionary[GameResource.Type, int])>void::","can_satisfy:0:(source:Entity, target:Entity)>bool:get_unsatisfied_resources:","signal_unsatisfied:0:(source:Entity, target:Entity)>void:get_unsatisfied_resources:","get_unsatisfied_resources:0:(source:Entity, target:Entity)>Array[GameResource.Type]:__can_satisfy_requirement:","satisfy:0:(source:Entity, target:Entity)>bool:__satisfy_requirement,can_satisfy,signal_unsatisfied:","get_energy_color:0:()>GameResource.Type::","get_energy_cost:0:()>int::"],{"Cost":["0",["_init:0:(source_in:Entity, target_in:Entity)>void::"]]}],"elastic-app/app/sr/scenes/core/resources/relic_manager.gd":["g",["add_relic:0:(relic_template_id:String)>Relic::","has_relic:0:(relic_template_id:String)>bool::"]],"elastic-app/app/sr/scenes/core/stats_manager.gd":["g",["_init:0:()>void:setup_stats_listeners:","setup_stats_listeners:0:()>void::","_on_stat_signal:0:(amount:int, signal_name:String, )>void::","print_stats:0:()>void::"]],"elastic-app/app/sr/scenes/core/time/beat_consumer.gd":["g",["process_beat:0:(context:BeatContext)>void::","should_remove:0:()>bool::","reset:0:()>void::"]],"elastic-app/app/sr/scenes/core/time/beat_context.gd":["g",["_init:0:()>void::"]],"elastic-app/app/sr/scenes/core/time/beat_listener_entity.gd":["g",["process_beat:0:(context:BeatContext)>void::","get_priority:0:()>int::","is_active:0:()>bool::","reset:0:()>void::"]],"elastic-app/app/sr/scenes/core/time/beat_processor.gd":["g",["_init:0:()>void::","process_beat:0:(context:BeatContext)>void:__check_end_conditions,__process_gears_phase,__process_gremlins_phase,__process_listeners_phase:","register_listener:0:(listener:BeatListenerEntity)>void::","unregister_listener:0:(listener:BeatListenerEntity)>void::","set_mainplate:0:(plate:Mainplate)>void::","set_gremlin_manager:0:(manager:GremlinManager)>void::","reset:0:()>void:reset:"]],"elastic-app/app/sr/scenes/core/time/timeline_manager.gd":["g",["_init:0:()>void::","get_beat_processor:0:()>BeatProcessor::","set_mainplate:0:(mainplate:Mainplate)>void:set_mainplate:","set_gremlin_manager:0:(manager:GremlinManager)>void:set_gremlin_manager:","register_beat_listener:0:(listener:BeatListenerEntity)>void::","unregister_beat_listener:0:(listener:BeatListenerEntity)>void::","advance_time:0:(ticks:float)>void:__advance_beats_instant:","get_current_ticks:0:()>float::","get_current_beats:0:()>int::","reset:0:()>void:reset:"]],"elastic-app/app/sr/scenes/countdown.gd":["g",["_ready:0:()>void::","render_label:0:()>String::","_process:0:(delta:float)>void:render_label:","_on_timer_timeout:0:()>void::"]],"elastic-app/app/sr/scenes/data/json_exporter.py":["p",["parse_arguments:476:()::Parse command line arguments.","main:536:():export_sheet_to_json:Main function - exports specified sheets from hardcoded spreadsheet IDs."],{"PublicSheetsToJsonExporter":["9",["__init__:10:(self, array_separator=\"|\")::","get_public_sheet_data:19:(self, spreadsheet_id, gid=0)::","convert_to_json:60:(self, data):_convert_value,_create_array_dict,_parse_params_field:","_apply_enum_prefix:186:(self, value, enum_prefix)::","_convert_value:222:(self, value, field_name=\"\", enum_prefix=None):_apply_enum_prefix,_is_float,_parse_params_field,_resolve_configuration_reference:","_resolve_configuration_reference:304:(self, value)::","_parse_params_field:330:(self, value, enum_prefix=None):_apply_enum_prefix,_resolve_configuration_reference:","_create_array_dict:402:(self, array_value, field_name)::","_is_float:426:(self, value)::Check if a string represents a float.","export_to_file:434:(self, json_data, output_file)::","export_sheet_to_json:451:(self, spreadsheet_id, output_file, gid=0):convert_to_json,export_to_file,get_public_sheet_data:"]]}],"elastic-app/app/sr/scenes/data/static_data.gd":["g",["_init:0:()>void:__build_enum_mappings:","parse_enum:0:(reference:String)>Variant::","_ready:0:()>void:build_field_indices,load_json_file:","build_field_indices:0:(data_dict:Dictionary)>Dictionary:add_index_key_variants:","add_index_key_variants:0:(index_keys:Array, value)::","load_json_file:0:(path:String)>Dictionary:resolve_json_data,resolve_json_record:","get_data_type_name:0:(data_dict:Dictionary)>String::","get_data_and_indices_for_type:0:(data_type:String)>Array::","lookup_in_data:0:(data_dict:Dictionary, field_to_filter:String, filter_value:Variant, field_to_return:String)>Array:get_data_type_name,lookup_in_data_linear,resolve_filter_value:","resolve_filter_value:0:(filter_value):__is_enum_reference,parse_enum:","lookup_in_data_linear:0:(data_dict:Dictionary, field_to_filter:String, filter_value:Variant, field_to_return:String)>Array:compare_numeric_values,resolve_filter_value:","compare_numeric_values:0:(field_value, filter_value, resolved_filter_value)>bool::","resolve_json_data:0:(data:Array)>Dictionary:convert_array_to_nested_dict,resolve_json_record:","resolve_json_record:0:(record:Dictionary)>Dictionary:resolve_value:","resolve_value:0:(value):normalize_numeric_value,parse_enum,resolve_configuration_reference,resolve_value:","normalize_numeric_value:0:(value:Variant)>Variant::","resolve_configuration_reference:0:(config_ref:String)::","convert_array_to_nested_dict:0:(data_array:Array)>Dictionary::","get_card_by_id:0:(card_id:String)>Dictionary::","get_mob_by_id:0:(mob_id:String)>Dictionary::","get_goals_by_id:0:(wave_id:String)>Dictionary::","get_relic_by_id:0:(relic_id:String)>Dictionary::","get_hero_by_id:0:(hero_id:String)>Dictionary::","get_wave_by_id:0:(wave_id:String)>Dictionary::","get_random_wave_for_act:0:(act:int)>Dictionary::","get_all_waves_for_act:0:(act:int)>Array::","clear_lookup_cache:0:()>void::","clear_enum_cache:0:()::","get_cache_stats:0:()>Dictionary::"]],"elastic-app/app/sr/scenes/game.gd":["g",["_ready:0:()>void::","_process:0:(delta:float)>void::","add_card_to_hand_by_instance:0:(card_instance_id:String)>void:add_card_to_hand:","add_card_to_hand:0:(card:Card)>void::","remove_card_from_hand_ui:0:(card_instance_id:String)>void::","format_elapsed_time:0:(timer:Timer)>String:format_time_string:","format_time_string:0:(time_seconds:float)>String::","format_elapsed_time_hex:0:(timer:Timer)>String:format_time_string_hex:","format_time_string_hex:0:(time_seconds:float)>String::"]],"elastic-app/app/sr/scenes/global_signals.gd":["g",["signal_ui_started_game:0:()>void::","signal_ui_started_battle:0:()>void::","signal_ui_quit_to_main:0:()>void::","signal_ui_execute_selected_onto_hovered:0:(source_instance_id:String, target_instance_id:String)>void::","signal_ui_selected_changed:0:(instance_id:String)>void::","signal_ui_slotted_card:0:(slot_name:String, image_path:String)>void::","signal_ui_changed_cursor_image:0:(image_path:String)>void::","signal_ui_card_hovered:0:(card_instance_id:String)>void::","signal_ui_card_unhovered:0:(card_instance_id:String)>void::","signal_ui_card_clicked:0:(card_instance_id:String)>void::","signal_ui_time_bump:0:()>void::","signal_ui_card_dropped_on_slot:0:(card_id:String, button_id:String)>void::","signal_core_begin_turn:0:()>void::","signal_core_end_turn:0:()>void::","signal_core_end_battle:0:()>void::","signal_core_game_over:0:()>void::","signal_core_game_win:0:()>void::","signal_core_arena_created:0:(size:int)>void::","signal_core_activation_with_non_activatable_source:0:(source_id:String)>void::","signal_core_activation_source_requires_target:0:(source_id:String)>void::","signal_core_activation_source_wrong_target:0:(source_id:String, target_id:String)>void::","signal_core_hero_created:0:(hero_instance_id:String)>void::","signal_core_hero_moved:0:(hero_instance_id:String, new_location:int)>void::","signal_core_mob_created:0:(mob_instance_id:String)>void::","signal_core_mob_health_changed:0:(mob_instance_id:String, new_health:int)>void::","signal_core_mob_check_state:0:(mob_instance_id:String, new_health:int)>void::","signal_core_mob_block_changed:0:(mob_instance_id:String, new_value:int)>void::","signal_core_mob_armor_changed:0:(mob_instance_id:String, new_value:int)>void::","signal_core_mob_moved:0:(mob_instance_id:String, new_location:int)>void::","signal_core_mob_intent_updated:0:(mob_instance_id:String)>void::","signal_core_card_slotted:0:(card_id:String, position:Vector2i)>void::","signal_core_card_unslotted:0:(slot_instance_id:String)>void::","signal_core_card_replaced:0:(old_card_id:String, new_card_id:String, position:Vector2i)>void::","signal_core_gear_process_beat:0:(card_instance_id:String, context:BeatContext)>void::","signal_core_slot_add_cooldown:0:(instance_id:String, duration:float)>void::","signal_core_slot_activated:0:(trigger_card_id:String)>void::","signal_core_card_selection:0:(selection_id:String, landing_zone:Library.Zone)>void::","signal_core_card_drawn:0:(card_instance_id:String)>void::","signal_core_card_played:0:(card_instance_id:String)>void::","signal_core_card_played_but_cant_satisfy_cost:0:(card_instance_id:String)>void::","signal_core_missing_resource:0:(type:GameResource.Type)>void::","signal_core_card_discarded:0:(card_instance_id:String)>void::","signal_core_card_destroyed:0:(card_instance_id:String)>void::","signal_core_card_removed_from_hand:0:(card_instance_id:String)>void::","signal_core_hero_resource_changed:0:(type:GameResource.Type, new_amount:int)>void::","signal_core_mob_resource_changed:0:(mob_instance_id:String, type:GameResource.Type, new_amount:int)>void::","signal_core_relic_added:0:(relic:Relic)>void::","signal_core_relic_removed:0:(relic_instance_id:String)>void::","signal_core_max_hand_size_reached:0:()>void::","signal_core_battleground_targeting_preview_changed:0:(space_index:int)>void::","signal_stats_cards_drawn:0:(amount:int)>void::","signal_stats_cards_popped:0:(amount:int)>void::","signal_stats_cards_played:0:(amount:int)>void::","signal_stats_cards_slotted:0:(amount:int)>void::","signal_stats_slots_activated:0:(amount:int)>void::","signal_stats_energy_spent:0:(amount:int)>void::","signal_stats_gold_spent:0:(amount:int)>void::","signal_ui_time_updated:0:(tick_display:String)>void::","signal_ui_card_ticks_resolved:0:()>void::"]],"elastic-app/app/sr/scenes/main_menu.gd":["g",["_ready:0:()>void::"]],"elastic-app/app/sr/scenes/timer_service.gd":["g",["create_timer:0:(duration:float)>SceneTreeTimer:create_timer:","create_unpauseable_timer:0:(duration:float)>SceneTreeTimer:create_timer:"]],"elastic-app/app/sr/scenes/ui/battleground/ui_battleground.gd":["g",["_ready:0:()>void::"]],"elastic-app/app/sr/scenes/ui/click_and_drag/click_and_drag.gd":["g",["_ready:0:()>void::","_input:0:(event:InputEvent)>void:add_dragging_visual,remove_dragging_visual:","add_dragging_visual:0:()>void:get_global_mouse_position,get_relevant_visual:","remove_dragging_visual:0:()>Variant::","get_relevant_visual:0:()>Node::","get_global_mouse_position:0:()>Vector2:get_global_mouse_position:"]],"elastic-app/app/sr/scenes/ui/click_and_drag/cursor.gd":["g",["is_valid_target:0:()>bool::","update_image:0:(texture_uid:String)>void::"]],"elastic-app/app/sr/scenes/ui/click_and_drag/global_selection_manager.gd":["g",["_init:0:()>void::","set_hovered:0:(instance_id:String)>void::","clear_hovered_known:0:(instance_id:String)>void:clear_hovered_force:","clear_hovered_force:0:()>void::","get_hovered:0:()>String::","has_hovered:0:()>bool::","is_card_hovered:0:()>bool::","is_card_selected:0:()>bool::","set_selected_known:0:(instance_id:String)>void:set_selected_force:","set_selected_force:0:()>void::","get_selected:0:()>String::","has_selected:0:()>bool::","activate_selected_onto_hovered:0:(last_pos:Vector2)>void:__clear_selected_force:"]],"elastic-app/app/sr/scenes/ui/click_and_drag/image_cursor.gd":["g",["_ready:0:()>void::","set_cursor_position:0:(pos:Vector2)>void::","_physics_process:0:(delta:float)>void::","update_image:0:(texture_uid:String)>void::"]],"elastic-app/app/sr/scenes/ui/entities/engine/ui_engine_slot.gd":["g",["_ready:0:()>void:_ready,update_card_display:","create_card_ui:0:()>void::","destroy_card_ui:0:()>void::","_process:0:(delta:float)>void:__update_progress_display:","pct:0:(numerator:float, denominator:float)>float::","_on_mouse_entered:0:()>void:_on_mouse_entered,create_card_ui:","_on_mouse_exited:0:()>void:_on_mouse_exited,destroy_card_ui:","update_progress_display:0:(percent:float, is_ready:bool = false)>void::","show_activation_feedback:0:()>void::","reset:0:()>void::","set_grid_position:0:(pos:Vector2i)>void::","update_card_display:0:(card:Card)>void::","set_active:0:(active:bool)>void::","can_accept_card:0:()>bool::","set_as_bonus_square:0:(type:String = \"draw_one_card\")>void::"]],"elastic-app/app/sr/scenes/ui/entities/engine/ui_engine_slot_simple.gd":["g",["_ready:0:()>void:__update_empty_visual:","set_grid_position:0:(pos:Vector2i)>void::","set_active:0:(active:bool)>void::","set_as_bonus_square:0:(type:String = \"draw_one_card\")>void:__update_bonus_visual:","set_occupied_visual:0:(card_name:String, texture:Texture2D = null)>void::","set_empty_visual:0:()>void:__update_empty_visual:","show_progress:0:(percent:float, is_ready:bool = false)>void::","hide_progress:0:()>void::","set_highlighted:0:(highlighted:bool)>void:__update_bonus_visual:"]],"elastic-app/app/sr/scenes/ui/entities/engine/ui_texture_button.gd":["g",["_ready:0:()>void::","create_button_entity:0:(engine_slot:EngineSlot, is_activation_button:bool)>bool::","_on_mouse_entered:0:()>void::","_on_mouse_exited:0:()>void::","_exit_tree:0:()>void:_on_mouse_exited:"]],"elastic-app/app/sr/scenes/ui/entities/gremlins/ui_gremlin.gd":["g",["_ready:0:()>void:_ready:","set_entity_data:0:(entity:Entity)>void:__update_display,set_entity_data:","_process:0:(_delta:float)>void:__get_disruption_text:"]],"elastic-app/app/sr/scenes/ui/entities/ui_entity.gd":["g",["_ready:0:()>void::","set_entity_data:0:(entity:Entity)>void::","_exit_tree:0:()>void:__on_mouse_exited:"]],"elastic-app/app/sr/scenes/ui/gremlins/ui_gremlin_panel.gd":["g",["_ready:0:()>void:__setup_background:","spawn_test_gremlins:0:()>void:__create_gremlin_from_data:"]],"elastic-app/app/sr/scenes/ui/hand/card_ui.gd":["g",["_ready:0:()>void::","set_card_data:0:(card:Card)>void:add_slot_icon:","refresh:0:()>void::","add_slot_icon:0:(icon_image:String, value:String, container:Container, font_size:GameIcon.TextSize)>void::","_on_gui_input:0:(event:InputEvent)>void::"]],"elastic-app/app/sr/scenes/ui/hand/hand_container.gd":["g",["_ready:0:()>void::","_input:0:(event:InputEvent)>void:arrange_cards:","add_card:0:(card_ui:CardUI, card:Card)>void:arrange_cards:","remove_card:0:(card_instance_id:String)>CardUI:arrange_cards:","arrange_cards:0:()>void:__animate_card_to_position,__calculate_card_layout:","_on_card_mouse_entered:0:(card:CardUI)>void:__calculate_base_position_for_card:","_on_card_mouse_exited:0:(card:CardUI)>void:arrange_cards:","_on_selected_changed:0:(card_instance_id:String)>void:deselect_current_card,toggle_card_selection_on:","toggle_card_selection_off:0:(card:CardUI)>void:deselect_current_card:","toggle_card_selection_on:0:(card:CardUI)>void:__raise_card,deselect_current_card:","deselect_current_card:0:()>void:arrange_cards:","_on_card_clicked:0:(card_instance_id:String)>void::","_notification:0:(what:int)>void:arrange_cards:"]],"elastic-app/app/sr/scenes/ui/hud/card_selection_modal.gd":["g",["_ready:0:()>void::","_process:0:(delta:float)>void::","resume:0:()>void::"]],"elastic-app/app/sr/scenes/ui/hud/countdown.gd":["g",["_ready:0:()>void::","_process:0:(delta:float)>void::"]],"elastic-app/app/sr/scenes/ui/hud/game_over_modal.gd":["g",["_ready:0:()>void::","_process:0:(delta:float)>void::","resume:0:()>void::"]],"elastic-app/app/sr/scenes/ui/hud/hud.gd":["g",["_ready:0:()>void::"]],"elastic-app/app/sr/scenes/ui/hud/menu_bar.gd":["g",["_ready:0:()>void::","_on_resource_changed:0:(type:GameResource.Type, value:int)>void::"]],"elastic-app/app/sr/scenes/ui/hud/pause_modal.gd":["g",["_ready:0:()>void::","_process:0:(delta:float)>void::","resume:0:()>void::","pause:0:()>void::","_on_resume_pressed:0:()>void:resume:","_on_quit_pressed:0:()>void::"]],"elastic-app/app/sr/scenes/ui/icons/game_icon.gd":["g",["_ready:0:()>void::","get_label:0:()>Label::","get_very_small_font_size:0:()>int::","get_small_font_size:0:()>int::","get_large_font_size:0:()>int::","set_text:0:(value:int, size:TextSize, font_color:Color = Color.WHITE)>void:set_string_text:","set_string_text:0:(value:String, size:TextSize, font_color:Color = Color.WHITE)>void:get_label,set_label_font:","set_label_font:0:(size:TextSize, font_color:Color)>void:get_label,get_large_font_size,get_small_font_size,get_very_small_font_size:"]],"elastic-app/app/sr/scenes/ui/icons/relics/relic_icon.gd":["g",["_ready:0:()>void:_ready:","set_relic:0:(relic:Relic)>void:get_label:","get_label:0:()>Label::","get_small_font_size:0:()>int::","get_large_font_size:0:()>int::"]],"elastic-app/app/sr/scenes/ui/icons/slot_icons/slot_icon.gd":["g",["_ready:0:()>void:_ready:","set_slot_image:0:(name:String)>void::","get_label:0:()>Label::","get_small_font_size:0:()>int::","get_large_font_size:0:()>int::"]],"elastic-app/app/sr/scenes/ui/icons/targeting/targeting_icon.gd":["g",["_ready:0:()>void:_ready:","get_label:0:()>Label::","get_small_font_size:0:()>int::","get_large_font_size:0:()>int::"]],"elastic-app/app/sr/scenes/ui/mainplate/grid_mapper.gd":["g",["_init:0:(logical:Vector2i = Vector2i(4, 4), physical:Vector2i = Vector2i(8, 8))>void:__calculate_offset:","to_physical:0:(logical_pos:Vector2i)>Vector2i:is_valid_logical:","to_logical:0:(physical_pos:Vector2i)>Variant:is_valid_logical:","is_valid_logical:0:(pos:Vector2i)>bool::","is_active_physical:0:(pos:Vector2i)>bool:to_logical:","get_active_physical_positions:0:()>Array[Vector2i]:to_physical:","expand:0:(expansion_type:String = \"row\")>bool:__calculate_offset:","reset:0:(initial_size:Vector2i = Vector2i(4, 4))>void:__calculate_offset:","get_logical_size:0:()>Vector2i::","get_physical_size:0:()>Vector2i::"]],"elastic-app/app/sr/scenes/ui/mainplate/ui_mainplate.gd":["g",["_ready:0:()>void:_ready:","get_cards_in_order:0:()>Array[Card]:get_cards_in_order:","request_card_placement:0:(card:Card, logical_position:Vector2i)>bool:request_card_placement:","expand_mainplate:0:(expansion_type:String = \"row\")>bool:__update_slot_visuals:","is_valid_position:0:(logical_position:Vector2i)>bool::","get_slot_at:0:(position:Vector2i)>EngineSlot::","get_occupied_slots:0:()>Array[EngineSlot]::","count_gears_with_tag:0:(tag:String)>int:get_occupied_slots:","remove_gear_at_physical:0:(physical_pos:Vector2i)>Card:request_card_removal:","request_card_removal:0:(logical_pos:Vector2i)>Card::","can_accept_card_at_physical:0:(physical_pos:Vector2i, require_empty:bool = false)>bool:is_valid_position:","get_card_at_physical:0:(physical_pos:Vector2i)>Card::","reset:0:()>void:__update_slot_visuals,reset:"]],"elastic-app/app/sr/scenes/ui/resources/revealed_resources_panel.gd":["g",["_ready:0:()>void::"]],"elastic-app/app/sr/scenes/ui/time/ui_beat_orchestrator.gd":["g",["_ready:0:()>void::","register_slot:0:(slot:EngineSlot)>void::","unregister_slot:0:(slot:EngineSlot)>void::","orchestrate_gear_fire:0:(slot:EngineSlot)>void::"]],"elastic-app/app/sr/scenes/ui/tourbillon/effect_visualizer.gd":["g",["_ready:0:()>void:_connect_effect_signals:","_connect_effect_signals:0:()>void::","_on_damage_dealt:0:(amount:int, target_position:Vector2)>void:_create_floating_text,_create_impact_particles:","_on_force_produced:0:(force_type:GameResource.Type, amount:int, source_position:Vector2)>void:_create_floating_text,_create_production_particles,_get_force_name:","_on_force_consumed:0:(force_type:GameResource.Type, amount:int, source_position:Vector2)>void:_create_floating_text,_get_force_name:","_on_card_drawn:0:(card_count:int, position:Vector2)>void:_create_floating_text:","_on_status_applied:0:(status_type:String, stacks:int, target_position:Vector2)>void:_create_floating_text,_create_status_particles:","_create_floating_text:0:(text:String, position:Vector2, color:Color)>void::","_create_impact_particles:0:(position:Vector2, color:Color)>void::","_create_production_particles:0:(position:Vector2, color:Color)>void::","_create_status_particles:0:(position:Vector2, color:Color, status_type:String)>void::","_get_force_name:0:(force_type:GameResource.Type)>String::","show_slot_effect:0:(slot:EngineSlot, effect_type:String, value:Variant = null)>void:_create_floating_text,_create_production_particles:"]],"elastic-app/app/sr/scenes/ui/tourbillon/floating_text.gd":["g",["_ready:0:()>void:_animate:","setup:0:(text_value:String, color_value:Color, duration_value:float = 1.0)>void::","_animate:0:()>void::"]],"elastic-app/app/sr/scenes/ui/tourbillon/time_display.gd":["g",["_ready:0:()>void:_update_display:","_on_time_updated:0:(tick_display:String)>void:_animate_beat_change,_animate_tick_change,_update_display:","_update_display:0:()>void::","_animate_tick_change:0:()>void::","_animate_beat_change:0:()>void::"]],"elastic-app/app/sr/scenes/ui/transitions/fade_to_black.gd":["g",["_ready:0:()>void::","go_to_scene:0:(scene:String, fade_color:Color = Color.BLACK, fade_duration:float = switch_duration)>void::"]],"elastic-app/app/sr/scenes/utilities/global_utilities.gd":["g",["set_seed:0:(world_seed:int)>void::","get_random_trigger_type:0:()>TriggerType::","get_engine_trigger_types:0:()>Array[TriggerType]::","load_image:0:(name:String)>Texture2D:load_image_uid:","load_slot_icon_image:0:(name:String)>Texture2D:load_image_uid:","load_image_uid:0:(uid:String)>Texture2D::","generate_random_numbers:0:(count:int, target_sum:int)>Array[int]::"]],"elastic-app/app/sr/scenes/utilities/sprite_control.gd":["g",["set_sprite:0:(sprite:AnimatedSprite2D, size:Vector2)>void:__update_min_size:"]],"elastic-app/app/sr/scenes/win.gd":["g",["_ready:0:()>void::"]],"elastic-app/app/start_game.py":["p",["start_game:6:()::"]],"elastic-app/app/test_compile_check.gd":["g",["_ready:0:()::"]],"elastic-app/app/test_grid_visual.gd":["g",["_init:0:()::"]],"elastic-app/app/test_mainplate_debug.gd":["g",["_ready:0:():__find_nodes_of_type:"]],"elastic-app/app/test_mainplate_quick.gd":["g",["_ready:0:()::"]],"elastic-app/app/test_mainplate_simple.gd":["g",["_ready:0:()::"]],"elastic-app/app/test_mainplate_visuals.gd":["g",["_ready:0:()::","_take_screenshot:0:()::","_input:0:(event)::"]],"elastic-app/app/test_mainplate_working.gd":["g",["_ready:0:()::"]],"elastic-app/app/test_scene_load.gd":["g",["_ready:0:()::"]],"elastic-app/app/test_type_fixes.gd":["g",["_init:0:()::"]],"elastic-app/t/web/claude_game_tester.py":["p",["main:356:():start,stop,test_basic_interaction,test_card_gameplay,wait:Simple CLI for testing"],{"ClaudeGameTester":["23",["__init__:36:(self, headless:bool = False, verbose:bool = True)::","log:47:(self, message:str, level:str = \"info\")::Log a message","build:54:(self)>bool:log:Build the Godot project","start:65:(self, build_first:bool = True)>bool:build,click_canvas,log,start:Start the game server and browser","stop:116:(self):log,stop,wait:Stop the game server and browser","click:139:(self, x:int, y:int):click,log:Click at specific coordinates","click_canvas:144:(self):click,log:Click on the game canvas to focus it","click_button:153:(self, text:str):click,log:Click a button by its text","hover:166:(self, x:int, y:int):log:Hover at specific coordinates","drag_card:173:(self, from_pos:Tuple[int, int], to_pos:Tuple[int, int], duration:float = 0.5):log:Drag a card from one position to another","drag_and_drop:195:(self, selector_from:str, selector_to:str):log:Drag from one element to another using selectors","press_key:210:(self, key:str):log:Press a keyboard key","type_text:215:(self, text:str):log:Type text","wait:222:(self, seconds:float):log:Wait for a specified time","take_screenshot:227:(self, name:str = \"screenshot\")>Path:log:Take a screenshot","get_canvas_info:236:(self)>Optional[Dict[str, Any]]:log:Get information about the game canvas","find_clickable_areas:258:(self)>list:log:Find areas that might be clickable (experimental)","compare_screenshots:289:(self, name1:str, name2:str)>float:log:Compare two screenshots (requires additional libraries)","wait_for_animation:295:(self, timeout:float = 2.0):log:Wait for animations to complete","test_basic_interaction:303:(self):click,get_canvas_info,log,press_key,take_screenshot,wait:Run a basic interaction test","test_card_gameplay:331:(self):click_button,drag_card,log,take_screenshot,wait:Test card game specific interactions"]]}],"elastic-app/t/web/final_test.py":["p",["final_test:8:async ()::"]],"elastic-app/t/web/quick_test.py":["p",["quick_test:8:async ()::"]],"elastic-app/t/web/serve_web.py":["p",["main:37:()::"],{"CORSHTTPRequestHandler":["16",["__init__:19:(self, *args, **kwargs):__init__:","end_headers:22:(self):end_headers:","do_OPTIONS:32:(self):end_headers:Handle OPTIONS requests for CORS preflight"]]}],"elastic-app/t/web/test_debug.py":["p",["test_debug:7:async ()::Debug game transition issues"]],"elastic-app/t/web/test_deployment.py":["p",["main:270:():run,signal_handler,stop_server:Main entry point"],{"TourbillonTester":["25",["__init__:26:(self)::","build_project:32:(self):run:Build the Godot project for web","start_server:48:(self)::Start the local web server","stop_server:69:(self)::Stop the local web server","run_browser_tests:79:(self)::Run automated browser tests","generate_report:205:(self)::Generate a test report","run:244:(self):build_project,generate_report,run_browser_tests,start_server,stop_server:Run the complete test suite"]]}],"elastic-app/t/web/test_detailed.py":["p",["test_with_details:8:async ()::Test with detailed console capture"]],"elastic-app/t/web/test_errors.py":["p",["test_errors:9:async ()::"]],"elastic-app/t/web/test_full_game.py":["p",["test_full_game:7:async ()::Click Play and wait for full game to load"]],"elastic-app/t/web/test_game.py":["p",["test_tourbillon:10:()::Run a simple test of Tourbillon"]],"elastic-app/t/web/test_game_ready.py":["p",["test_game_ready:7:async ()::Click Play and wait for game to be fully ready"]],"elastic-app/t/web/test_gameplay.py":["p",["test_gameplay:7:async ()::Test entering the game and checking UI"]],"elastic-app/t/web/test_github_pages.py":["p",["test_github_pages:7:async ()::Test the live GitHub Pages deployment"]],"elastic-app/t/web/test_live_background.py":["p",["test_live_background:6:async ()::Test the deployed version and capture what's actually showing"]],"elastic-app/t/web/test_local_changes.py":["p",["test_local_changes:8:async ()::Test the local build with our changes"]],"elastic-app/t/web/test_play.py":["p",["test_play_button:7:()::Test clicking the Play button"]],"elastic-app/t/web/test_play_game.py":["p",["test_play_game:7:async ()::Click Play and capture the game state"]],"elastic-app/t/web/test_with_console.py":["p",["test_with_console:9:async ()::Test the local build with console output"]],"update_wave_sheet.js":["j",["updateWaveSheet:28:async ()::"]]},"g":[["TourbillonTester.run","TourbillonTester.generate_report"],["set_string_text","get_label"],["main","TourbillonTester.run"],["resolve_json_record","resolve_value"],["_on_mouse_exited","destroy_card_ui"],["draw_new_hand","discard_hand"],["ClaudeGameTester.wait_for_animation","log"],["_get_target_by_type","get_weakest_gremlin"],["_check_source_for_errors","_extract_class_name"],["_on_card_drawn","_create_floating_text"],["PublicSheetsToJsonExporter.export_sheet_to_json","export_to_file"],["ClaudeGameTester.test_basic_interaction","press_key"],["load_json_file","resolve_json_data"],["lookup_in_data","get_data_type_name"],["_ready","__find_nodes_of_type"],["ClaudeGameTester.click_canvas","click"],["_on_card_mouse_exited","arrange_cards"],["main","TypeSafetyFixer.fix_file"],["draw_card","Library.get_all_cards"],["clear","Library.clear"],["ClaudeGameTester.stop","ClaudeGameTester.wait"],["PublicSheetsToJsonExporter._convert_value","_resolve_configuration_reference"],["get_beat_processor","get_beat_processor"],["set_sprite","__update_min_size"],["check_all_scripts","_check_script"],["toggle_card_selection_on","deselect_current_card"],["activate_selected_onto_hovered","__clear_selected_force"],["PublicSheetsToJsonExporter._parse_params_field","PublicSheetsToJsonExporter._apply_enum_prefix"],["TypeSafetyChecker.check_file","TypeSafetyChecker._check_collection_typing"],["PublicSheetsToJsonExporter.convert_to_json","PublicSheetsToJsonExporter._create_array_dict"],["receive_damage","_apply_hero_modifiers"],["main","stop"],["add","is_position_empty"],["_on_force_produced","_get_force_name"],["main","fix_more_missing_types"],["Library.shuffle","shuffle"],["set_empty_visual","__update_empty_visual"],["PublicSheetsToJsonExporter.export_sheet_to_json","convert_to_json"],["main","PublicSheetsToJsonExporter.export_sheet_to_json"],["ClaudeGameTester.test_card_gameplay","ClaudeGameTester.wait"],["lookup_in_data_linear","resolve_filter_value"],["main","fix_countdown"],["process_tick","__execute_trigger"],["expand_mainplate","__update_slot_visuals"],["add_forces","add_force"],["ClaudeGameTester.type_text","ClaudeGameTester.log"],["_on_defeated","_remove_disruptions"],["add_dragging_visual","get_relevant_visual"],["move_card_to_zone2","Library.get_count"],["_init","check_autoloads"],["FinalTypeSafetyFixer.fix_file","FinalTypeSafetyFixer._fix_untyped_arrays"],["PublicSheetsToJsonExporter.convert_to_json","PublicSheetsToJsonExporter._convert_value"],["draw_card","get_count"],["resolve_value","resolve_value"],["main","export_sheet_to_json"],["place_card","request_card_placement"],["_apply_damage","_on_defeated"],["process_beat","process_beat"],["draw_new_hand","get_count"],["_check_source_for_errors","_is_file_exempt"],["ClaudeGameTester.click","ClaudeGameTester.log"],["end_turn","allow_activations"],["advance_time","__advance_beats_instant"],["_get_target_by_type","get_bottommost_gremlin"],["Hero.build","Cost._init"],["PublicSheetsToJsonExporter.export_sheet_to_json","PublicSheetsToJsonExporter.convert_to_json"],["TypeSafetyChecker._check_function_typing","_split_params"],["_get_target_by_type","get_topmost_gremlin"],["_ready","_sync_to_handler"],["ClaudeGameTester.test_card_gameplay","log"],["PublicSheetsToJsonExporter.convert_to_json","_parse_params_field"],["format_elapsed_time","format_time_string"],["_on_selected_changed","toggle_card_selection_on"],["get_cards_in_order","get_card_at"],["ClaudeGameTester.click_canvas","ClaudeGameTester.log"],["main","ClaudeGameTester.test_basic_interaction"],["main","TypeSafetyChecker.check_file"],["CORSHTTPRequestHandler.do_OPTIONS","end_headers"],["ClaudeGameTester.start","Card.build"],["ClaudeGameTester.stop","ClaudeGameTester.stop"],["add_card_to_deck","Library.add_card"],["_on_defeated_internal","_on_defeated"],["remove_gear_at_physical","request_card_removal"],["get_cards_for_selection","Library.get_count"],["process_beat","__get_positions_in_order"],["CORSHTTPRequestHandler.__init__","PublicSheetsToJsonExporter.__init__"],["_on_status_applied","_create_status_particles"],["add_shields","add_shields"],["discard_hand","get_all_cards"],["print_hand_size","Library.get_count"],["_check_script","_extract_class_name"],["draw_card","draw_top"],["ClaudeGameTester.click_button","log"],["FinalTypeSafetyFixer.fix_file","_fix_untyped_arrays"],["request_card_placement","has_card_at"],["_reflect_damage","receive_damage"],["_on_mouse_entered","create_card_ui"],["ClaudeGameTester.stop","ClaudeGameTester.log"],["CORSHTTPRequestHandler.end_headers","CORSHTTPRequestHandler.end_headers"],["main","stop_server"],["_check_type_declarations","_remove_strings_and_comments"],["_ready","update_card_display"],["PublicSheetsToJsonExporter._parse_params_field","_resolve_configuration_reference"],["_on_selected_changed","deselect_current_card"],["PublicSheetsToJsonExporter.export_sheet_to_json","PublicSheetsToJsonExporter.export_to_file"],["shuffle_libraries","Library.shuffle"],["_on_mouse_exited","_on_mouse_exited"],["activate","__apply_passive_effects"],["PublicSheetsToJsonExporter.convert_to_json","_convert_value"],["PublicSheetsToJsonExporter.convert_to_json","_create_array_dict"],["ClaudeGameTester.test_basic_interaction","click"],["_process","__update_progress_display"],["apply_overkill_damage","get_topmost_gremlin"],["_exit_tree","__on_mouse_exited"],["_check_function_types","_extract_function_name"],["main","ClaudeGameTester.test_card_gameplay"],["execute","_on_defeated"],["count_gears_with_tag","get_occupied_slots"],["main","test_card_gameplay"],["TypeSafetyChecker.check_file","TypeSafetyChecker._check_variable_typing"],["_trigger_disruption","_apply_disruption"],["_process","render_label"],["get_effect_description","__describe_effects"],["main","fix_file"],["ClaudeGameTester.start","Hero.build"],["receive_damage","_apply_pre_damage_modifiers"],["consume_forces","consume_force"],["_check_script","_is_file_exempt"],["add_card_to_deck","Library.get_count"],["set_relic","get_label"],["end_turn","disallow_activations"],["TypeSafetyChecker.check_file","_check_function_typing"],["draw_card","get_all_cards"],["ClaudeGameTester.test_basic_interaction","wait"],["PublicSheetsToJsonExporter.convert_to_json","PublicSheetsToJsonExporter._parse_params_field"],["main","check_file"],["resolve_value","normalize_numeric_value"],["_check_script","_try_instantiate_class"],["_on_force_consumed","_get_force_name"],["_init","check_specific_files"],["main","start"],["TypeSafetyChecker.check_file","_check_onready_typing"],["satisfy","signal_unsatisfied"],["ClaudeGameTester.click_button","ClaudeGameTester.click"],["draw_card","Library.draw_top"],["ClaudeGameTester.drag_card","log"],["ClaudeGameTester.click","click"],["shuffle_libraries","shuffle"],["move_card_to_zone2","add_card"],["_on_mouse_entered","_on_mouse_entered"],["activate","activate"],["ClaudeGameTester.take_screenshot","ClaudeGameTester.log"],["resolve_filter_value","parse_enum"],["_on_force_produced","_create_floating_text"],["TourbillonTester.run","stop_server"],["ClaudeGameTester.build","log"],["get_cards_in_order","has_card_at"],["_input","arrange_cards"],["resolve_filter_value","__is_enum_reference"],["TypeSafetyChecker.check_file","_check_variable_typing"],["ClaudeGameTester.test_basic_interaction","ClaudeGameTester.log"],["_ready","load_json_file"],["set_text","set_string_text"],["get_cards_in_order","__get_positions_in_order"],["main","ClaudeGameTester.wait"],["main","ClaudeGameTester.start"],["move_card_to_zone2","remove_card"],["_init","Library._init"],["CORSHTTPRequestHandler.__init__","FinalTypeSafetyFixer.__init__"],["main","TypeSafetyChecker.print_report"],["add_card_to_deck","add_card_to_zone"],["get_id","get_entity"],["_check_private_access","_remove_strings_and_comments"],["PublicSheetsToJsonExporter._convert_value","PublicSheetsToJsonExporter._resolve_configuration_reference"],["_check_source_for_errors","_is_line_exempt"],["add_card_to_hand_by_instance","add_card_to_hand"],["take_damage","receive_damage"],["set_as_bonus_square","__update_bonus_visual"],["ClaudeGameTester.hover","ClaudeGameTester.log"],["set_bonus_square","has_card_at"],["set_entity_data","__update_display"],["lookup_in_data","lookup_in_data_linear"],["TypeSafetyChecker._check_collection_typing","TypeSafetyChecker._is_in_string_or_comment"],["toggle_card_selection_on","__raise_card"],["process_beat","_trigger_poison"],["ClaudeGameTester.test_basic_interaction","ClaudeGameTester.press_key"],["_check_function_types","_check_parameter_types"],["set_label_font","get_large_font_size"],["ClaudeGameTester.test_basic_interaction","take_screenshot"],["ClaudeGameTester.start","BattlegroundEntity.build"],["arrange_cards","__animate_card_to_position"],["ClaudeGameTester.find_clickable_areas","ClaudeGameTester.log"],["_get_target_by_type","get_strongest_gremlin"],["PublicSheetsToJsonExporter._convert_value","PublicSheetsToJsonExporter._parse_params_field"],["_on_time_updated","_update_display"],["reset","_sync_to_handler"],["reset","__calculate_offset"],["discard_hand","move_card_to_zone2"],["ClaudeGameTester.start","click_canvas"],["CORSHTTPRequestHandler.__init__","TypeSafetyFixer.__init__"],["_check_type_declarations","_check_function_types"],["ClaudeGameTester.wait","ClaudeGameTester.log"],["ClaudeGameTester.click_canvas","log"],["receive_damage","receive_damage"],["TourbillonTester.run","TourbillonTester.run_browser_tests"],["_on_damage_dealt","_create_impact_particles"],["_check_directory_recursive","_check_directory_recursive"],["ClaudeGameTester.start","build"],["ClaudeGameTester.start","Gremlin.build"],["ClaudeGameTester.wait_for_animation","ClaudeGameTester.log"],["deal_damage_to_target","get_gremlins_in_order"],["TourbillonTester.run","TourbillonTester.stop_server"],["ClaudeGameTester.start","start"],["FinalTypeSafetyFixer.fix_file","FinalTypeSafetyFixer._fix_untyped_dictionaries"],["signal_moved","signal_moved"],["process_beat","__activate_card"],["set_string_text","set_label_font"],["process_beat","__should_card_activate"],["main","fix_more_functions"],["TypeSafetyChecker.check_file","_check_nested_dictionary"],["ClaudeGameTester.stop","stop"],["resolve_value","parse_enum"],["_ready","_animate"],["TypeSafetyChecker.check_file","TypeSafetyChecker._check_onready_typing"],["CORSHTTPRequestHandler.__init__","TourbillonTester.__init__"],["ClaudeGameTester.stop","wait"],["clear_all_zones","Library.clear"],["_on_damage_dealt","_create_floating_text"],["_on_status_applied","_create_floating_text"],["main","fix_static_data"],["reset","__update_slot_visuals"],["draw_card","shuffle"],["assign_random_bonus_squares","has_card_at"],["_ready","__setup_background"],["reset","reset"],["TourbillonTester.run","TourbillonTester.build_project"],["ClaudeGameTester.start","ClaudeGameTester.click_canvas"],["ClaudeGameTester.test_basic_interaction","ClaudeGameTester.get_canvas_info"],["TourbillonTester.run","build_project"],["ClaudeGameTester.press_key","log"],["main","signal_handler"],["main","test_basic_interaction"],["signal_created","signal_created"],["_ready","_ready"],["remove_card","arrange_cards"],["ClaudeGameTester.start","Mainplate.build"],["PublicSheetsToJsonExporter._convert_value","_apply_enum_prefix"],["TypeSafetyChecker._check_function_typing","TypeSafetyChecker._split_params"],["ClaudeGameTester.test_card_gameplay","wait"],["get_card","__get_zone_object"],["_check_directory_recursive","_check_script"],["activate_slot_effect","activate_slot_effect"],["add_card_to_deck","add_card"],["add_barriers","add_barriers"],["can_accept_card_at_physical","is_valid_position"],["_ready","_update_display"],["satisfy","__satisfy_requirement"],["_init","check_all_scripts"],["set_gremlin_manager","set_gremlin_manager"],["lookup_in_data_linear","compare_numeric_values"],["draw_card","move_card_to_zone2"],["PublicSheetsToJsonExporter._parse_params_field","PublicSheetsToJsonExporter._resolve_configuration_reference"],["ClaudeGameTester.start","log"],["ClaudeGameTester.compare_screenshots","log"],["main","print_report"],["_init","Mainplate._init"],["_check_script","_check_source_for_errors"],["main","fix_arrays_and_dicts"],["ClaudeGameTester.click_canvas","ClaudeGameTester.click"],["draw_card","Library.get_count"],["is_isolated","get_adjacent_positions"],["execute","execute"],["ClaudeGameTester.get_canvas_info","log"],["draw_new_hand","Library.get_count"],["ClaudeGameTester.test_card_gameplay","ClaudeGameTester.log"],["process_beat","__check_end_conditions"],["PublicSheetsToJsonExporter._convert_value","_parse_params_field"],["TypeSafetyChecker._check_collection_typing","_is_in_string_or_comment"],["decrement_all_status_effects","decrement_status_effect"],["get_card","Library.get_card"],["_on_time_updated","_animate_beat_change"],["apply_burn","apply_burn"],["_init","__calculate_offset"],["set_highlighted","__update_bonus_visual"],["ClaudeGameTester.test_basic_interaction","get_canvas_info"],["TourbillonTester.run","generate_report"],["PublicSheetsToJsonExporter._convert_value","PublicSheetsToJsonExporter._is_float"],["_init","setup_stats_listeners"],["ClaudeGameTester.click_button","ClaudeGameTester.log"],["format_elapsed_time_hex","format_time_string_hex"],["ClaudeGameTester.test_card_gameplay","take_screenshot"],["PublicSheetsToJsonExporter._convert_value","_is_float"],["_on_force_produced","_create_production_particles"],["_check_source_for_errors","_check_private_access"],["TourbillonTester.run","start_server"],["load_image","load_image_uid"],["count_cards_with_tag","get_cards_in_order"],["_input","add_dragging_visual"],["TypeSafetyFixer.fix_file","TypeSafetyFixer.type_parameters"],["ClaudeGameTester.test_basic_interaction","log"],["_check_type_declarations","_check_variable_type"],["satisfy","can_satisfy"],["TypeSafetyChecker.check_file","TypeSafetyChecker._check_nested_dictionary"],["draw_card","add_card_to_zone"],["_ready","_connect_effect_signals"],["clear_all_zones","clear"],["set_label_font","get_label"],["get_card_ids_in_zone","get_all_card_ids"],["heal","_sync_to_handler"],["ClaudeGameTester.test_basic_interaction","ClaudeGameTester.take_screenshot"],["Entity.build_entity","__requires_template_id"],["has_forces","has_force"],["clear_hovered_known","clear_hovered_force"],["process_beat","get_card_at"],["CORSHTTPRequestHandler.do_OPTIONS","CORSHTTPRequestHandler.end_headers"],["add_card_to_zone","Library.add_card"],["ClaudeGameTester.hover","log"],["set_card_data","add_slot_icon"],["heal","_sync_from_handler"],["assign_random_bonus_squares","set_bonus_square"],["execute_below_threshold","get_gremlins_in_order"],["receive_damage","_apply_post_damage_effects"],["TourbillonTester.run","TourbillonTester.start_server"],["add_cards_to_deck","add_card_to_deck"],["deactivate","__process_effects"],["add_gremlin","_find_empty_slot"],["PublicSheetsToJsonExporter._parse_params_field","_apply_enum_prefix"],["FinalTypeSafetyFixer.fix_file","_fix_untyped_dictionaries"],["resolve_json_data","convert_array_to_nested_dict"],["arrange_cards","__calculate_card_layout"],["request_card_placement","is_valid_position"],["_check_source_for_errors","_check_type_declarations"],["move_card_to_zone2","get_count"],["consume_forces","has_forces"],["ClaudeGameTester.type_text","log"],["draw_card","Library.shuffle"],["load_json_file","resolve_json_record"],["is_active_physical","to_logical"],["receive_damage","_sync_to_handler"],["process_beat","__process_gears_phase"],["Entity.build_entity","__generate_instance_id"],["_exit_tree","_on_mouse_exited"],["deselect_current_card","arrange_cards"],["receive_damage","_sync_from_handler"],["create_unpauseable_timer","create_timer"],["ClaudeGameTester.click","log"],["CORSHTTPRequestHandler.end_headers","end_headers"],["process_beat","_trigger_disruption"],["Hero.build","Mainplate._init"],["to_logical","is_valid_logical"],["get_cards_for_selection","get_count"],["_init","_init"],["FinalTypeSafetyFixer.fix_file","_fix_return_types"],["ClaudeGameTester.drag_and_drop","ClaudeGameTester.log"],["TypeSafetyFixer.fix_file","infer_type_from_literal"],["spawn_test_gremlins","__create_gremlin_from_data"],["get_card","get_card"],["ClaudeGameTester.drag_card","ClaudeGameTester.log"],["get_card_ids_in_zone","Library.get_all_card_ids"],["print_hand_size","get_count"],["_input","remove_dragging_visual"],["get_global_mouse_position","get_global_mouse_position"],["ClaudeGameTester.test_basic_interaction","ClaudeGameTester.click"],["check_specific_files","_check_script"],["get_cards_in_order","get_cards_in_order"],["TourbillonTester.build_project","run"],["ClaudeGameTester.build","ClaudeGameTester.log"],["_apply_post_damage_effects","_reflect_damage"],["main","wait"],["add_dragging_visual","get_global_mouse_position"],["heal","heal"],["add_force","get_force_resource"],["TypeSafetyChecker.check_file","_check_collection_typing"],["deal_damage_to_target","_get_target_by_type"],["main","ClaudeGameTester.stop"],["ClaudeGameTester.stop","log"],["get_card_ids_in_zone","__get_zone_object"],["can_be_executed","can_be_executed"],["ClaudeGameTester.start","EngineButtonEntity.build"],["receive_damage","_apply_damage"],["FinalTypeSafetyFixer.fix_file","FinalTypeSafetyFixer._fix_return_types"],["is_isolated","has_card_at"],["create_timer","create_timer"],["set_mainplate","set_mainplate"],["expand","__calculate_offset"],["ClaudeGameTester.start","ClaudeGameTester.start"],["ClaudeGameTester.click_button","click"],["TourbillonTester.run","run_browser_tests"],["process_beat","__process_listeners_phase"],["move_card_to_zone2","Library.remove_card"],["main","fix_issue"],["_notification","arrange_cards"],["CORSHTTPRequestHandler.__init__","CORSHTTPRequestHandler.__init__"],["_check_type_declarations","_check_custom_type_usage"],["ClaudeGameTester.test_card_gameplay","drag_card"],["move","get_position"],["add","contains"],["set_label_font","get_very_small_font_size"],["process_beat","__process_gremlins_phase"],["get_active_physical_positions","to_physical"],["TypeSafetyFixer.fix_file","TypeSafetyFixer.infer_type_from_literal"],["TypeSafetyFixer.fix_file","TypeSafetyFixer.infer_node_type"],["_ready","build_field_indices"],["request_card_placement","__trigger_bonus"],["ClaudeGameTester.click","ClaudeGameTester.click"],["process_beat","has_card_at"],["ClaudeGameTester.test_card_gameplay","ClaudeGameTester.take_screenshot"],["TourbillonTester.build_project","TourbillonTester.run"],["TypeSafetyFixer.fix_file","type_parameters"],["to_physical","is_valid_logical"],["main","fix_all_remaining"],["add_card","arrange_cards"],["add_card_to_deck","get_count"],["set_bonus_square","is_valid_position"],["TypeSafetyFixer.type_parameters","infer_type_from_literal"],["signal_unsatisfied","get_unsatisfied_resources"],["toggle_card_selection_off","deselect_current_card"],["has_id","contains"],["Hero.build","Library._init"],["FinalTypeSafetyFixer.fix_file","_fix_parameter_types"],["main","FinalTypeSafetyFixer.fix_file"],["ClaudeGameTester.test_card_gameplay","ClaudeGameTester.click_button"],["show_slot_effect","_create_production_particles"],["add_card_to_zone","__get_zone_object"],["main","get_all_issues"],["_apply_post_damage_effects","_apply_overkill"],["load_slot_icon_image","load_image_uid"],["_on_force_consumed","_create_floating_text"],["_on_time_updated","_animate_tick_change"],["move_card_to_zone2","__get_zone_object"],["ClaudeGameTester.test_basic_interaction","ClaudeGameTester.wait"],["clear","clear"],["build_field_indices","add_index_key_variants"],["PublicSheetsToJsonExporter.export_sheet_to_json","get_public_sheet_data"],["receive_damage","_calculate_damage"],["ClaudeGameTester.press_key","ClaudeGameTester.log"],["_on_resume_pressed","resume"],["show_slot_effect","_create_floating_text"],["fork_child_agent","save_session_info"],["PublicSheetsToJsonExporter._convert_value","PublicSheetsToJsonExporter._apply_enum_prefix"],["lookup_in_data","resolve_filter_value"],["resolve_value","resolve_configuration_reference"],["ClaudeGameTester.take_screenshot","log"],["Hero.build","_init"],["set_label_font","get_small_font_size"],["consume_force","get_force_resource"],["draw_new_hand","draw_card"],["can_satisfy","get_unsatisfied_resources"],["discard_hand","Library.get_all_cards"],["FinalTypeSafetyFixer.fix_file","FinalTypeSafetyFixer._fix_parameter_types"],["main","run"],["_init","__build_enum_mappings"],["main","check_godot_compilation"],["TypeSafetyChecker.check_file","TypeSafetyChecker._check_function_typing"],["process_tick","__check_transition_condition"],["PublicSheetsToJsonExporter.export_sheet_to_json","PublicSheetsToJsonExporter.get_public_sheet_data"],["get_unsatisfied_resources","__can_satisfy_requirement"],["activate","__process_effects"],["_process","__get_disruption_text"],["_init","Cost._init"],["ClaudeGameTester.start","ClaudeGameTester.log"],["apply_poison_to_target","_get_target_by_type"],["ClaudeGameTester.compare_screenshots","ClaudeGameTester.log"],["TypeSafetyFixer.type_parameters","TypeSafetyFixer.infer_type_from_literal"],["CORSHTTPRequestHandler.__init__","ClaudeGameTester.__init__"],["ClaudeGameTester.start","ClaudeGameTester.build"],["has_force","get_force_resource"],["contains","get_position"],["remove","contains"],["TypeSafetyFixer.fix_file","infer_node_type"],["ClaudeGameTester.get_canvas_info","ClaudeGameTester.log"],["move_card_to_zone2","Library.add_card"],["deactivate","__remove_passive_effects"],["_on_card_mouse_entered","__calculate_base_position_for_card"],["get_adjacent_positions","is_valid_position"],["main","TourbillonTester.stop_server"],["set_selected_known","set_selected_force"],["ClaudeGameTester.test_card_gameplay","click_button"],["check_all_scripts","_check_directory_recursive"],["request_card_placement","request_card_placement"],["Library.shuffle","Library.shuffle"],["ClaudeGameTester.test_card_gameplay","ClaudeGameTester.drag_card"],["get_cards_for_selection","__get_card_for_selection"],["CORSHTTPRequestHandler.__init__","__init__"],["ClaudeGameTester.find_clickable_areas","log"],["resolve_json_data","resolve_json_record"],["add_card_to_zone","add_card"],["set_entity_data","set_entity_data"],["ClaudeGameTester.drag_and_drop","log"],["CORSHTTPRequestHandler.__init__","TypeSafetyChecker.__init__"],["ClaudeGameTester.wait","log"],["move","is_position_empty"],["_ready","__update_empty_visual"]],"d":{"GREMLIN_IMPLEMENTATION_DESIGN.md":["Gremlin System Implementation Design Document","Overview","1. Unified Damage System","1.1 New File: `src/scenes/core/combat/damage_packet.gd`","Encapsulates all information about a damage instance","Immutable once created - modifications create new packets","Core properties","Damage keywords (from PRD)","Targeting","Metadata"],"GREMLIN_SCHEMA.md":["Tourbillon Gremlin Data Schema","Overview","Core Schema Structure","Basic Properties","Move Definition Structure","Effect Structure","Effect Types","Constraint Effects","Disruption Effects","Combat Effects"],"PARENT_CONTEXT.md":["Parent Session Context","Repository Overview","Current State","Working Components","In Development","Key Technical Decisions","Architecture Patterns","Code Organization","Important Context for Agents","When Working on Issues"],"PRIVATE_VARIABLES.md":["Private Variable Convention","Overview","Convention Rules","Private Variables","Examples","Compile Check Hook","Benefits","Migration Guide","Exemptions","Line-Level Exemptions"],"README.md":["Tourbillon","Project Contents","Game Design","Claude AI Integration","Features","Setup","Project Origin","Development"],"README_CLAUDE.md":["Claude Integration - Quick Reference","For Users","Mention @claude in Any Issue/PR","For Developers","Setup (One-Time)","Create the repository parent session","Manage Context","Edit what Claude knows about the repository","Recreate after major changes","Check Status"],"UNIFIED_DAMAGE_SYSTEM_DESIGN.md":["Unified Damage System Design","Overview","Core Architecture","1. Damage Packet Class","Encapsulates all information about a damage instance","Immutable once created - modifications create new packets","Core properties","Damage keywords (from PRD)","Targeting","Metadata"],"claude-customizations/README.md":["Claude Customizations for Godot Projects","Features","\ud83d\udd0d Godot Compile Check Hook","Quick Start","1. Copy the compile check to your project","2. Run the check","3. Integrate with CI/CD","Directory Structure","Available Hooks","godot_compile_check.gd"],"claude-customizations/docs/EXEMPTIONS.md":["Exemption System Guide","Overview","Exemption Levels","1. Line-Level Exemptions","EXEMPT: TYPE_CHECK","EXEMPT: PRIVATE_ACCESS","EXEMPT: ALL","@compile-check-ignore","2. File-Level Exemptions","3. Pattern-Based Exemptions"],"claude-customizations/docs/PRIVATE_VARIABLES.md":["Private Variable Convention","Overview","Convention Rules","Private Variables","Examples","Compile Check Hook","Benefits","Migration Guide","Exemptions","Line-Level Exemptions"],"claude-customizations/docs/TYPE_SAFETY.md":["Type Safety in Godot Projects","Overview","Why Type Safety Matters","Required Type Annotations","Variables","Functions","Parameters","Advanced Type Patterns","Typed Arrays","Typed Dictionaries"],"claude-customizations/godot-hooks/README.md":["Godot Hooks","godot_compile_check.gd","Features","Installation","Usage","Configuration","Exemption Examples","EXEMPT: TYPE_CHECK","EXEMPT: PRIVATE_ACCESS","EXEMPT: ALL"],"docs/README.md":["Tourbillon Documentation","Document Organization","Subdirectories","Quick Links"],"docs/TOURBILLON_PRD.md":["Product Requirements Document: Tourbillon - Engine Builder Roguelike Card Game","1. Executive Summary","1.1 Game Overview","1.2 Core Pillars","1.3 Target Experience","1.4 Thematic Framework","2. Core Mechanics","2.0 Order of Operations"],"docs/claude-integration/CLAUDE_INTEGRATION.md":["Claude GitHub Integration Documentation","Overview","Quick Start","First Time Setup","Create the repository parent session (one-time, 5-10 minutes)","Check Status","See if parent session exists and get info","Manual Management","Edit the context file that Claude reads","Recreate parent after major code changes"],"docs/claude-integration/CLAUDE_INTEGRATION_FINAL_REPORT.md":["Claude GitHub Integration - Final Report","Date: August 31, 2025","Executive Summary","What Was Accomplished","1. Root Cause Analysis","2. Solutions Implemented","3. Working Features","4. Workflow Configuration","5. Performance Metrics","Outstanding Issue"],"docs/claude-integration/CLAUDE_INTEGRATION_SUCCESS_REPORT.md":["Claude GitHub Integration - Success Report","Date: August 31, 2025","Executive Summary","Key Achievement","Performance Results","The Solution","Problem","Root Cause","Breakthrough","Implementation"],"docs/claude-integration/CLAUDE_SESSION_BUG_CONFIRMED.md":["Claude Session Persistence Bug - CONFIRMED","Date: August 31, 2025","Executive Summary","The Bug","Root Cause Analysis","Testing Results","Test 1-7: Various Approaches","Error Messages Captured","Confirmed Workaround","Instead of this (doesn't work):"],"docs/claude-integration/CLAUDE_SESSION_SOLUTIONS.md":["Claude Session Persistence Solutions","Research Summary","Core Problem Recap","Solution Options","Option 1: Claude Code SDK Implementation (Recommended)","Create persistent client","Resume specific session","Or continue most recent","Option 2: Anthropic API with Custom Session Management","Option 3: GitHub Issues as Context Storage"],"docs/claude-integration/CLAUDE_SESSION_WORKING_SOLUTION.md":["Claude Session Persistence - WORKING SOLUTION","Date: August 31, 2025","\ud83c\udf89 BREAKTHROUGH DISCOVERY","The Key Discovery","What Doesn't Work","These fail with \"No conversation found\"","What DOES Work","This successfully resumes the session!","Also works with --continue","Proof of Concept Test Results"],"docs/claude-integration/FINAL_SOLUTION_SUMMARY.md":["Final Solution Summary: Interactive Session Success","\u2705 Solution Status: WORKING","The Problem We Solved","The Solution We Implemented","Test Results (August 31, 2025)","Session Tests - ALL PASSING \u2705","Performance Metrics","How It Works","1. Parent Session (One-Time Setup)","2. GitHub Actions (Automated)"],"docs/claude-integration/GITHUB_CLAUDE_INTEGRATION_SETUP.md":["GitHub Claude Integration - Complete Setup Guide","Overview","The Session Persistence Solution","Prerequisites","Setup Instructions","Step 1: Copy Workflow Files","Step 2: Configure Self-Hosted Runner","Step 3: Create Initial Session","Step 4: Test the Integration","Continuous Thread Monitoring"],"docs/claude-integration/SOLUTION_INTERACTIVE_SESSIONS.md":["Solution: Interactive Session Workaround","Problem Discovered","The Working Solution","How It Works","Why This Works","Implementation Steps","Step 1: Create Parent Session Interactively","Navigate to repository","Start Claude in interactive mode","Once Claude starts, paste this initialization:"],"docs/claude-integration/WORKFLOW_STATUS_REPORT.md":["Enhanced Claude GitHub Workflow - Detailed Status Report","Executive Summary","What We're Building","Architecture: Parent-Child Session System","What's Been Done","1. **Fixed Workflow Syntax Issues** \u2705","2. **Implemented UUID-Based Sessions** \u2705","3. **Created Core Components** \u2705","4. **Successfully Created Parent Session** \u2705","The Current Problem"],"docs/claude-integration/WORKFLOW_TEST_RESULTS.md":["GitHub Actions Claude Workflow - Test Results","Date: August 31, 2025","Executive Summary","Test Results","1. Issue Creation & Responses \u2705","2. Comment Replies \u2705","3. Pull Request Creation \u2705","4. Eyes Emoji Reaction \u2705","Workflow Configuration","Active Workflow"],"docs/deployment/WEB_BUILD_STATUS.md":["Tourbillon Web Build","Local Testing","Live Version","\ud83c\udfae Live Game"],"docs/deployment/WEB_DEPLOYMENT.md":["Web Deployment Guide for Tourbillon","Quick Start","Local Testing","Navigate to the app directory","Build for web","Serve locally","OR","Open in browser","http://localhost:8000","Deployment Options"],"docs/deployment/WEB_TESTING.md":["Tourbillon Web Testing Guide","Testing Infrastructure","Quick Test Commands","From elastic-app/app directory:","Quick test (headless - works without display):","Test with visible browser (requires display/XServer):","Full deployment test with metrics:","Test card gameplay specifically:","What Claude Can Test","Test Workflow for PRs"],"docs/design/ENCOUNTER_WAVES.md":["Encounter Waves - Gremlin Combinations","Overview","Difficulty Rating System","**Base Difficulty Calculation**","**Difficulty Tiers**","Act 1 Waves (Tutorial & Learning)","**Wave 1A: \"First Contact\"**","**Wave 1B: \"Mechanical Disruption\"**  ","**Wave 1C: \"Armored Introduction\"**","**Wave 1D: \"Swarm Basics\"**"],"docs/design/GREMLIN_BESTIARY.md":["Gremlin Bestiary - Design Reference","Overview","Design Principles","Power Scaling by Tier","Summoning Rules","Gnats (Swarm Fodder)","**Basic Gnat**","**Barrier Gnat**  ","**Constricting Barrier Gnat**","**Draining Barrier Gnat**"],"docs/game-design/BEGINNER_BUILD_GUIDE.md":["Beginner's Guide to Tourbillon Builds","Quick Start: Pick Your Playstyle","\ud83d\udd25 \"I want to go FAST!\" \u2192 MICRO SWARM","\ud83d\uddff \"I want BIG effects!\" \u2192 TITAN FORTRESS  ","\u2699\ufe0f \"I like combos!\" \u2192 FORGE CHAIN","\ud83c\udf00 \"I'm weird!\" \u2192 CHAOS VOID","\ud83d\udc3a \"Pack tactics!\" \u2192 BEAST PACK","Your First 3 Card Choices","Simple Decision Tree","Force Combinations That Work"],"docs/game-design/BUILD_ARCHETYPES.md":["Tourbillon Build Archetypes & Strategies","Overview","Core Archetypes","1. MICRO SWARM - \"The Hummingbird\"","2. TITAN FORTRESS - \"The Mountain\"","3. FORGE CHAIN - \"The Factory\"","4. CHAOS VOID - \"The Singularity\"","5. BEAST PACK - \"The Hunt\"","6. CRYSTAL PRECISION - \"The Clockmaker\""],"docs/game-design/CARD_SCHEMA_DESIGN.md":["Tourbillon Card Schema Design","Overview","Schema Constraints & Capabilities","Core Schema Fields","Identity Fields","Visual/UI Fields","Time & Production Fields","Force Fields","Tag & Keyword Fields","Effect Trigger Fields"],"docs/game-design/FORCE_IDENTITY_SUMMARY.md":["Force Identity Summary - Quick Reference","Core Design Philosophy","The 5 Forces at a Glance","\ud83d\udd25 Heat (Red) = DAMAGE","\ud83c\udfaf Precision (Blue) = CARDS & TEMPO","\ud83c\udf00 Momentum (Green) = SPEED & EFFICIENCY","\u2696\ufe0f Balance (White) = DEFENSE","\ud83d\udc80 Entropy (Black) = CHAOS & FLEXIBILITY","Why This Creates Depth","Can't Do Everything"],"docs/game-design/FORCE_SYSTEM_REDESIGN.md":["Force System Redesign - Adding Depth","Current Problem","Proposed Solution: Tiered Resource System","Tier 1: Basic Resources (Raw Materials)","Tier 2: Refined Forces (The 5 Colors)","Tier 3: Specialized Effects","Force Mechanical Identities","\ud83d\udd25 Heat (Red) - \"Direct Damage\"","\ud83c\udfaf Precision (Blue) - \"Control & Cards\"  ","\ud83c\udf00 Momentum (Green) - \"Scaling & Speed\""],"docs/game-design/FUN_EVALUATION.md":["Tourbillon Fun Factor Evaluation","Core Fun Elements \u2705","1. The \"Tick-Tick-Boom\" Satisfaction","2. Meaningful Decisions Every Card","3. Build Expression & Discovery","Potential Fun Problems \ud83d\udea8","1. Card Draw Death Spiral","2. Analysis Paralysis","3. Deadlock Frustration","4. Early Game Slowness"],"docs/game-design/STARTER_DECK_DESIGN.md":["Tourbillon Starter Deck Design","Overview","Design Principles","Deck Composition (12 cards)","Card Draw Engine (4 cards - 33%)","Force Generators (5 cards - 42%)","Damage Dealers (3 cards - 25%)","Key Mechanics Demonstrated","Features Field","Feature Categories"],"docs/outdated/FORCE_MECHANICAL_IDENTITY_OUTDATED.md":["[OUTDATED] Force Mechanical Identity - Simplified","Force Mechanical Identity - Simplified","Core Principle: Each Force Has Exclusive Effects","The 5 Force Identities","\ud83d\udd25 Heat (Red) - \"Raw Damage\"","\ud83c\udfaf Precision (Blue) - \"Card Control & Tempo\"","\ud83c\udf00 Momentum (Green) - \"Acceleration & Efficiency\"","\u2696\ufe0f Balance (White) - \"Protection\"","\ud83d\udc80 Entropy (Black) - \"Destruction & Chaos\"","Why This Works"],"docs/technical/CODEBASE_REUSABILITY_ANALYSIS.md":["Codebase Reusability Analysis: Elastic \u2192 Tourbillon","Executive Summary","High-Level Comparison","Detailed Reusability Plan","1. \ud83d\udfe2 **DIRECTLY REUSABLE** (Use As-Is)","2. \ud83d\udfe1 **EASILY ADAPTABLE** (Minor Modifications)","Extend air.gd to forces.gd","Modify game_resource.gd","Keep the time/energy duality concept","Add force interaction matrix"],"docs/technical/DEVELOPMENT_CONTEXT.md":["Tourbillon Development Context","Repository Overview","Directory Structure","Current Implementation Status","\u2705 Completed","\ud83d\udd04 In Progress","\u274c Not Started","Core Game Concepts","Time System","Mainplate (Grid)"],"elastic-app/app/TYPE_SAFETY_HOOK.md":["Type Safety Presubmit Hook Documentation","Overview","Installation","What It Checks","1. Variable Type Declarations","\u274c BAD - Untyped variables","\u2705 GOOD - Typed variables","2. Function Parameters and Return Types","\u274c BAD - Untyped function","\u2705 GOOD - Fully typed function"],"elastic-app/app/ofl_font_assets/andiamo/README.md":["Andiamo a bruciargli la casa","Descrizione"],"elastic-app/app/ofl_font_assets/garamontio_capo/README.md":["Garamontio Capo","Descrizione"],"elastic-app/app/src/CLAUDE.md":["Directory Context Instructions","IMPORTANT: Read Directory Documentation First","Why This Matters","Before You Code"],"elastic-app/app/src/PATTERNS.md":["Src - Source Code Patterns","Type Safety","Example of correct typing:","CORRECT:","WRONG:","Resource and Script Loading","Example:","CORRECT:","Preload scenes and resources only (NOT scripts with class_name)","WRONG:"],"elastic-app/app/src/PURPOSE.md":["Src - Source Code Structure","What goes here:","When to use:","Structure:"],"elastic-app/app/src/scenes/core/CLAUDE.md":["Directory Context Instructions","IMPORTANT: Read Directory Documentation First","Why This Matters","Before You Code"],"elastic-app/app/src/scenes/core/PATTERNS.md":["Core - Coding Patterns","Interface-First Development","Core Principle","Decision Tree for Any Change","Define/Modify Interfaces (when needed)","Implementation Guidelines","Interface Requirements","Red Flags (Stop and Fix)","Core Architecture","Data structures:"],"elastic-app/app/src/scenes/core/PURPOSE.md":["Core - Game Logic and Systems","What goes here:","When to use:","Key principles:"],"elastic-app/app/src/scenes/core/entities/CLAUDE.md":["Directory Context Instructions","IMPORTANT: Read Directory Documentation First","Why This Matters","Before You Code"],"elastic-app/app/src/scenes/core/entities/PATTERNS.md":["Core Entities - Coding Patterns","Instance IDs","Instance Management Patterns","Entity structure:","Component patterns:","Entity creation:","Entity operations:","ID management:"],"elastic-app/app/src/scenes/core/entities/PURPOSE.md":["Core Entities - Game Entity System","What goes here:","When to use:","Entity types:"],"elastic-app/app/src/scenes/data/GOOGLE_SHEETS.md":["Google Sheets Data Sources","Tourbillon Card Data Sheet","Authentication","Sheet Structure","Current Contents","Usage"],"elastic-app/app/src/scenes/data/PATTERNS.md":["Data Patterns and Parsing Guide","Google Sheets Integration","Reading Card Data from Google Sheets","Python JSON Exporter (`json_exporter.py`)","Key Functions","Usage with Google Sheets Data","After fetching from Google Sheets (via Node.js script)","Convert to game format","Write to card_data.json","Data Flow"],"elastic-app/app/src/scenes/ui/CLAUDE.md":["Directory Context Instructions","IMPORTANT: Read Directory Documentation First","Why This Matters","Before You Code"],"elastic-app/app/src/scenes/ui/PATTERNS.md":["UI - Coding Patterns","Creating UI Components","Core Principles","Privacy Conventions for UI","Component structure:","State management:","Styling patterns:","Event handling:","Signal Handler Naming","Component reuse:"],"elastic-app/app/src/scenes/ui/PURPOSE.md":["UI - User Interface Components","What goes here:","When to use:","Organization:","Key principles:"],"elastic-app/app/src/scenes/ui/entities/CLAUDE.md":["Directory Context Instructions","IMPORTANT: Read Directory Documentation First","Why This Matters","Before You Code"],"elastic-app/app/src/scenes/ui/entities/PATTERNS.md":["UI Entities - Coding Patterns","Entity display:","Status indicators:","Interaction patterns:","Animation:","Component props:"],"elastic-app/app/src/scenes/ui/entities/PURPOSE.md":["UI Entities - Entity Display Components","What goes here:","When to use:","Organization:"]},"deps":{"elastic-app/app/capture_game.py":["playwright.sync_api","time","sys"],"elastic-app/app/capture_game_interactive.py":["playwright.sync_api","time","sys"],"elastic-app/app/check_type_safety.py":["sys","re","os","subprocess","tempfile","pathlib","typing","argparse"],"elastic-app/app/claude_game_tester.py":["subprocess","time","sys","os","pathlib","typing","json","playwright.sync_api","playwright.sync_api","argparse"],"elastic-app/app/fix_all_remaining.py":["subprocess","re","pathlib"],"elastic-app/app/fix_final_type_safety.py":["re","sys","pathlib","typing","argparse"],"elastic-app/app/fix_final_types.py":["sys","re","pathlib"],"elastic-app/app/fix_last_types.py":["re","pathlib"],"elastic-app/app/fix_remaining_safety.py":["re","pathlib","typing"],"elastic-app/app/fix_remaining_types.py":["sys","re","pathlib"],"elastic-app/app/fix_type_safety.py":["sys","re","os","pathlib","typing","argparse"],"elastic-app/app/src/scenes/data/json_exporter.py":["json","csv","requests  # type: ignore","argparse","sys","os","io"],"elastic-app/app/start_game.py":["playwright.sync_api","time"],"elastic-app/tests/web/claude_game_tester.py":["subprocess","time","sys","os","pathlib","typing","json","playwright.sync_api","playwright.sync_api","argparse"],"elastic-app/tests/web/final_test.py":["asyncio","playwright.async_api","subprocess","time"],"elastic-app/tests/web/quick_test.py":["asyncio","playwright.async_api","subprocess","time"],"elastic-app/tests/web/serve_web.py":["http.server","socketserver","os","sys","pathlib"],"elastic-app/tests/web/test_debug.py":["asyncio","playwright.async_api","time","subprocess"],"elastic-app/tests/web/test_deployment.py":["subprocess","time","sys","os","signal","pathlib","json","datetime","playwright.sync_api","playwright.sync_api"],"elastic-app/tests/web/test_detailed.py":["asyncio","playwright.async_api","json","os","subprocess","time"],"elastic-app/tests/web/test_errors.py":["asyncio","playwright.async_api","subprocess","time","json"],"elastic-app/tests/web/test_full_game.py":["asyncio","playwright.async_api","time","subprocess"],"elastic-app/tests/web/test_game.py":["claude_game_tester","sys"],"elastic-app/tests/web/test_game_ready.py":["asyncio","playwright.async_api","time","subprocess"],"elastic-app/tests/web/test_gameplay.py":["asyncio","playwright.async_api","time","subprocess"],"elastic-app/tests/web/test_github_pages.py":["asyncio","playwright.async_api","json"],"elastic-app/tests/web/test_live_background.py":["asyncio","playwright.async_api"],"elastic-app/tests/web/test_local_changes.py":["asyncio","playwright.async_api","time","subprocess"],"elastic-app/tests/web/test_play.py":["sys","time","claude_game_tester"],"elastic-app/tests/web/test_play_game.py":["asyncio","playwright.async_api","time","subprocess"],"elastic-app/tests/web/test_with_console.py":["asyncio","playwright.async_api","time","subprocess","json"],"update_wave_sheet.js":["googleapis","fs","path"]},"dir_purposes":{".github/scripts":"Build and utility scripts","claude-customizations/docs":"Project documentation","docs":"Project documentation","docs/claude-integration":"Test files and test utilities","docs/deployment":"Test files and test utilities","elastic-app/app":"Test files and test utilities","elastic-app/app/owned_assets":"Test files and test utilities","elastic-app/app/src":"Source code root directory","elastic-app/tests/web":"Test files and test utilities"},"staleness":1756423970.012798}